<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>longway&#39;s blog</title>
  <subtitle>Technology change the world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jackwaylong.github.io/"/>
  <updated>2016-12-06T06:00:46.000Z</updated>
  <id>http://jackwaylong.github.io/</id>
  
  <author>
    <name>龙伟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>wait和sleep 深度分析</title>
    <link href="http://jackwaylong.github.io/2016/12/05/wait-sleep/"/>
    <id>http://jackwaylong.github.io/2016/12/05/wait-sleep/</id>
    <published>2016-12-05T06:08:43.000Z</published>
    <updated>2016-12-06T06:00:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>首先我们需要明白wait与sleep的区别，区别大致有下面几个方面:</p>
</blockquote>
<ol>
<li>wait是Object中的方法,sleep是Thread中的方法</li>
<li>wait必须在同步代码块中调用，也就是说必须首先获得监视器锁，然后才能调用,sleep可以在任何可能的地方调用</li>
<li>wait释放锁,sleep不释放锁</li>
<li>wait尽可能的少消耗cpu资源,sleep消耗更多的cpu资源</li>
</ol>
<a id="more"></a>
<h2 id="下面分析一种wait协助的场景，如果换成sleep可能导致死锁"><a href="#下面分析一种wait协助的场景，如果换成sleep可能导致死锁" class="headerlink" title="下面分析一种wait协助的场景，如果换成sleep可能导致死锁"></a>下面分析一种wait协助的场景，如果换成sleep可能导致死锁</h2><blockquote>
<p>wait协助代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TestThread.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Object&gt; MAP = <span class="keyword">new</span> WeakHashMap&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object WAIT = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        Object object;</div><div class="line">        <span class="keyword">synchronized</span> (MAP) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"tid:"</span> + Thread.currentThread().getId());</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                object = MAP.get(key);</div><div class="line">                <span class="keyword">if</span> (object == WAIT) &#123;<span class="comment">// 线程等待</span></div><div class="line">                    Log.e(TAG, <span class="string">"wait......"</span>);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        MAP.wait();</div><div class="line">                        <span class="comment">//Thread.sleep(1000);</span></div><div class="line">                        Log.e(TAG,<span class="string">"wake...."</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123; <span class="comment">// hit</span></div><div class="line">                    Log.e(TAG, <span class="string">"hit:"</span> + object);</div><div class="line">                    <span class="keyword">return</span> object;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    MAP.put(key, WAIT); <span class="comment">// 存放wait对象</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        Log.e(TAG, <span class="string">"generate...."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">synchronized</span> (MAP) &#123;</div><div class="line">            object = UUID.randomUUID().toString();</div><div class="line">            Log.e(TAG, object.toString());</div><div class="line">            <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</div><div class="line">                MAP.put(key, object); <span class="comment">// 存放真正数据</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                MAP.remove(key); <span class="comment">// 如果获取数据失败,需要删除对应的key,让等待对象自己获取</span></div><div class="line">            &#125;</div><div class="line">            MAP.notifyAll(); <span class="comment">// 通知在MAP上的所有等待对象</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> object;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>上面代码可以正常协助,如果将<code>MAP.wait()</code> 替换成 <code>Thread.sleep(1000)</code> 就很可能导致死锁</p>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<p>通过上面代码我们在写并发代码的时候，一定要理解场景，不然真的很危险.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先我们需要明白wait与sleep的区别，区别大致有下面几个方面:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;wait是Object中的方法,sleep是Thread中的方法&lt;/li&gt;
&lt;li&gt;wait必须在同步代码块中调用，也就是说必须首先获得监视器锁，然后才能调用,sleep可以在任何可能的地方调用&lt;/li&gt;
&lt;li&gt;wait释放锁,sleep不释放锁&lt;/li&gt;
&lt;li&gt;wait尽可能的少消耗cpu资源,sleep消耗更多的cpu资源&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="java" scheme="http://jackwaylong.github.io/categories/java/"/>
    
    
      <category term="wait" scheme="http://jackwaylong.github.io/tags/wait/"/>
    
      <category term="sleep" scheme="http://jackwaylong.github.io/tags/sleep/"/>
    
  </entry>
  
  <entry>
    <title>shareUID</title>
    <link href="http://jackwaylong.github.io/2016/12/03/shareUID/"/>
    <id>http://jackwaylong.github.io/2016/12/03/shareUID/</id>
    <published>2016-12-03T05:45:14.000Z</published>
    <updated>2016-12-06T06:01:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>shareUID是提供已经安装app之间的数据访问的通道，我们最常见的场景就是同一个公司不同的app安装在同一手机上，在某些时候可能需要数据，资源，代码共享，但是实现该目的也是有一定限制的，首先保证app之间的签名一致，同时shareUID值相等，才能完全无障碍访问所有资源，不然只能访问部分资源，代码，sharedPreferences等资源是没法访问到的，即使访问到的也是非安全的。<br><a id="more"></a></p>
<h2 id="shareuid常见数据共享的方式有"><a href="#shareuid常见数据共享的方式有" class="headerlink" title="shareuid常见数据共享的方式有"></a>shareuid常见数据共享的方式有</h2><ol>
<li>用户数据共享</li>
<li>资源共享</li>
<li>代码共享</li>
</ol>
<h2 id="用户数据共享"><a href="#用户数据共享" class="headerlink" title="用户数据共享"></a>用户数据共享</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String filename = <span class="string">"share"</span>;</div><div class="line">       String key = <span class="string">"share"</span>;</div><div class="line">       String value = ShareUtils.getStringValue(<span class="keyword">this</span>, targetPackagename, filename, key, <span class="string">""</span>);</div><div class="line">       Log.e(TAG, <span class="string">"value:"</span> + value);</div></pre></td></tr></table></figure>
<h2 id="资源共享"><a href="#资源共享" class="headerlink" title="资源共享"></a>资源共享</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String app_name = ShareUtils.getResString(<span class="keyword">this</span>, targetPackagename, <span class="string">"app_name"</span>);</div><div class="line">       Log.e(TAG, <span class="string">"app_name:"</span> + app_name);</div></pre></td></tr></table></figure>
<h2 id="代码共享"><a href="#代码共享" class="headerlink" title="代码共享"></a>代码共享</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">String cName = <span class="string">"com.longway.share.Print"</span>;</div><div class="line">        Class&lt;?&gt; clz = ShareUtils.loadClass(<span class="keyword">this</span>, targetPackagename, cName);</div><div class="line">        <span class="keyword">if</span> (clz != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Object o = clz.newInstance();</div><div class="line">                Method method = clz.getDeclaredMethod(<span class="string">"print"</span>, String.class);</div><div class="line">                <span class="keyword">if</span> (!method.isAccessible()) &#123;</div><div class="line">                    method.setAccessible(<span class="keyword">true</span>);</div><div class="line">                &#125;</div><div class="line">                method.invoke(o, TAG);</div><div class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>以上只是简单的提供数据访问的几种方式面，比如数据库，assets等等都是可以访问的，但是访问的时候需要考虑数据安全。</p>
</blockquote>
<h2 id="访问数据简单代码"><a href="#访问数据简单代码" class="headerlink" title="访问数据简单代码"></a>访问数据简单代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShareUtils</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ShareUtils</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStringValue</span><span class="params">(Context context, String targetPackname, String filename, String key, String dv)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Context ctx = context.createPackageContext(targetPackname, Context.CONTEXT_IGNORE_SECURITY);</div><div class="line">            SharedPreferences sharedPreferences = ctx.getSharedPreferences(filename, Context.MODE_PRIVATE);</div><div class="line">            <span class="keyword">return</span> sharedPreferences.getString(key, dv);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dv;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getResString</span><span class="params">(Context context, String targetPackname, String resName, Object... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Context ctx = context.createPackageContext(targetPackname, Context.CONTEXT_IGNORE_SECURITY);</div><div class="line">            Resources resources = ctx.getResources();</div><div class="line">            <span class="keyword">int</span> id = resources.getIdentifier(resName, <span class="string">"string"</span>, targetPackname);</div><div class="line">            <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> resources.getString(id, args);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAppname</span><span class="params">(Context context, String targetPackname,<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Context ctx = context.createPackageContext(targetPackname, Context.CONTEXT_IGNORE_SECURITY);</div><div class="line">            Resources resources = ctx.getResources();</div><div class="line">            <span class="keyword">return</span> resources.getString(id);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(Context context, String targetPackagename, String name) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Context ctx = context.createPackageContext(targetPackagename,Context.CONTEXT_IGNORE_SECURITY|Context.CONTEXT_INCLUDE_CODE);</div><div class="line">            ClassLoader classLoader = ctx.getClassLoader();</div><div class="line">            Log.e(<span class="string">"loader"</span>, (context.getClassLoader() == classLoader) + <span class="string">""</span>);</div><div class="line">            Log.e(<span class="string">"pathClassLoader"</span>, (classLoader <span class="keyword">instanceof</span> PathClassLoader) + <span class="string">""</span>);</div><div class="line">            <span class="keyword">return</span> classLoader.loadClass(name);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<p>shareuid的前提是app已经安装到了设备中，不然是访问不了的，如果是没安装的访问，就只能用插件化的方式去加载，然后去访问了。根据自己的需求，选择对应的技术实现就好了。</p>
</blockquote>
<p><a href="https://github.com/jackwaylong/shareuid" target="_blank" rel="external">查看源码实例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shareUID是提供已经安装app之间的数据访问的通道，我们最常见的场景就是同一个公司不同的app安装在同一手机上，在某些时候可能需要数据，资源，代码共享，但是实现该目的也是有一定限制的，首先保证app之间的签名一致，同时shareUID值相等，才能完全无障碍访问所有资源，不然只能访问部分资源，代码，sharedPreferences等资源是没法访问到的，即使访问到的也是非安全的。&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://jackwaylong.github.io/categories/android/"/>
    
    
      <category term="shareUID" scheme="http://jackwaylong.github.io/tags/shareUID/"/>
    
      <category term="Context" scheme="http://jackwaylong.github.io/tags/Context/"/>
    
  </entry>
  
  <entry>
    <title>SharedPreferences真的安全吗?</title>
    <link href="http://jackwaylong.github.io/2016/12/03/safesharepreferences/"/>
    <id>http://jackwaylong.github.io/2016/12/03/safesharepreferences/</id>
    <published>2016-12-02T19:04:51.000Z</published>
    <updated>2016-12-06T06:01:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>SharedPreferences是单进程线程安全,Android系统进程之间的内存是隔离的,<br>这样就导致了进程之间如果访问同一个数据文件,进行数据共享通信的时候,可能会<br>出现下面几种异常:<br><a id="more"></a></p>
<ol>
<li>数据不一致</li>
<li>数据异常</li>
<li>文件异常</li>
</ol>
<h2 id="进程之间数据共享"><a href="#进程之间数据共享" class="headerlink" title="进程之间数据共享"></a>进程之间数据共享</h2><p>要想实现进程中之间安全通信,我们需要将不同进程之间对数据的访问映射到同一个数据<br>进程,然后通过这个进程实现线程安全实现数据通信,我们可以将这个进程理解为代理进程<br>,Android系统已经提供给我们ContentProvider进程,我们通过这个就可以实现安全通信</p>
<h2 id="进程之间数据共享图例"><a href="#进程之间数据共享图例" class="headerlink" title="进程之间数据共享图例"></a>进程之间数据共享图例</h2><p><img src="https://www.processon.com/chart_image/5826bc16e4b00c4fc87d4b8c.png"></p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><ol>
<li><p>注册进程之间数据观察者(非必须)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> SharePreferencesObserver mSharePreferencesObserver = <span class="keyword">new</span> SharePreferencesObserver() &#123;</div><div class="line">       	<span class="meta">@Override</span></div><div class="line">       	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSharePreferencesChange</span><span class="params">(SharePreferencesObservable sharePreferencesObservable, String key)</span> </span>&#123;</div><div class="line">           <span class="comment">//Log.e(TAG, "key:" + key + ",value:" + mSharePreferencesManager.getBoolean(key, 		false));</span></div><div class="line">           Log.e(TAG, <span class="string">"map result &lt;&lt;"</span> + mSharePreferencesManager.getAll().toString());</div><div class="line"></div><div class="line">       &#125;</div><div class="line">   &#125;;</div><div class="line">mSharePreferencesManager.registerOnSharePreferencesObserver(mSharePreferencesObserver);</div></pre></td></tr></table></figure>
</li>
<li><p>数据访问</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Log.e(TAG, mSharePreferencesManager.putBoolean(<span class="string">"isExpire"</span>, <span class="keyword">true</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.contains(<span class="string">"isExpire"</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getBoolean(<span class="string">"isExpire"</span>, <span class="keyword">false</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.putInt(<span class="string">"int"</span>, <span class="number">3</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getInt(<span class="string">"int"</span>, -<span class="number">1</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.putFloat(<span class="string">"float"</span>, <span class="number">3.9f</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getFloat(<span class="string">"float"</span>, <span class="number">0.0f</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.putLong(<span class="string">"long"</span>, <span class="number">40L</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getLong(<span class="string">"long"</span>, <span class="number">0L</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.putString(<span class="string">"string"</span>, <span class="string">"小马哥"</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getString(<span class="string">"string"</span>, <span class="string">"马云"</span>));</div><div class="line">Log.e(TAG, mSharePreferencesManager.remove(<span class="string">"string"</span>) + <span class="string">""</span>);</div><div class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">set.add(<span class="string">"hello1"</span>);</div><div class="line">set.add(<span class="string">"world1"</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.putStringSet(<span class="string">"set"</span>, set) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getStringSet(<span class="string">"set"</span>, <span class="keyword">null</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, <span class="string">"map result &lt;&lt;"</span> + mSharePreferencesManager.getAll().toString());</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意上面的步骤在任意进程都一样,并且数据都是安全共享的 </p>
</blockquote>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用过程中有任何问题反馈至<a href="https://github.com/jackwaylong/SafeSharedPreferences/issues" target="_blank" rel="external">feedback</a></p>
<h2 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h2><blockquote>
<p>任何疑问?</p>
</blockquote>
<ol>
<li>源码学习<a href="https://github.com/jackwaylong/SafeSharedPreferences/tree/master/safeshareperferences/src/main/java/com/longway/safeshareperferences" target="_blank" rel="external">safeSharedPreferences</a></li>
</ol>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><blockquote>
<p>clone项目发送pull request</p>
</blockquote>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>SafeSharedPreferences is under the Apache license. See the <a href="https://github.com/jackwaylong/SafeSharedPreferences/blob/master/LICENSE" target="_blank" rel="external">LICENSE</a> file for details.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SharedPreferences是单进程线程安全,Android系统进程之间的内存是隔离的,&lt;br&gt;这样就导致了进程之间如果访问同一个数据文件,进行数据共享通信的时候,可能会&lt;br&gt;出现下面几种异常:&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://jackwaylong.github.io/categories/android/"/>
    
    
      <category term="sharepreferences" scheme="http://jackwaylong.github.io/tags/sharepreferences/"/>
    
      <category term="contentprovider" scheme="http://jackwaylong.github.io/tags/contentprovider/"/>
    
      <category term="martixcursor" scheme="http://jackwaylong.github.io/tags/martixcursor/"/>
    
  </entry>
  
  <entry>
    <title>单例模式真的很简单吗？</title>
    <link href="http://jackwaylong.github.io/2016/12/03/single/"/>
    <id>http://jackwaylong.github.io/2016/12/03/single/</id>
    <published>2016-12-02T18:30:04.000Z</published>
    <updated>2016-12-06T05:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>单例模式真的不简单，但是单例模式也是我们开发中常用的一种设计模式,然而不管Github上开源的代码，还是很多开发同学写的单例模式，百花齐放，百家争鸣，各种版本，这篇文章我想跟大家聊聊我心中的单例模式，同时我会给出我心目中的单例模式的各种版本，同时会给出不同版本的优缺点，以及我们最后应该选用哪个版本才是最为安全，优雅，同时性能也是比较好的，最后我想说，安全，性能是一个折中的考虑。</p>
</blockquote>
<a id="more"></a>
<h2 id="单例对象创建的一般步骤"><a href="#单例对象创建的一般步骤" class="headerlink" title="单例对象创建的一般步骤"></a>单例对象创建的一般步骤</h2><ol>
<li>构造函数<code>private</code></li>
<li>定义<code>static</code>成员变量</li>
<li>提供<code>static getInstance</code> 方法获取对象</li>
</ol>
<h2 id="SingletonV1"><a href="#SingletonV1" class="headerlink" title="SingletonV1"></a>SingletonV1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV1</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonV1 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV1</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            sInstance = <span class="keyword">new</span> SingletonV1();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本是最简单的方式创建单例对象,但是这个版本只适合单线程场景下，在并发条件下，不能保证对象为唯一性，如果有同学也这么实现的，赶紧反思一下。</p>
<h2 id="SingletonV2"><a href="#SingletonV2" class="headerlink" title="SingletonV2"></a>SingletonV2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonV2 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV2</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonV2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            sInstance = <span class="keyword">new</span> SingletonV2();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本跟第一个版本的区别就是多了个<code>synchronized</code>关键字，暂且我们这么理解，这个关键字是保证保证线程安全的，这样一来，我们保证了单例，确实没错，但是这个版本并不是我想要的，为什么了？因为这个锁是方法锁，意味着性能损失较大，至于为什么损失较大，这里就不展开讲了，有疑问的同学可以评论里，向我提问。</p>
<h2 id="SingletonV3"><a href="#SingletonV3" class="headerlink" title="SingletonV3"></a>SingletonV3</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV3</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonV3 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV3</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (SingletonV3.class) &#123;</div><div class="line">            <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                sInstance = <span class="keyword">new</span> SingletonV3();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本看上去是代码段局部锁，但是我们仔细一看，其实跟第二个版本一模一样，没有本质区别，所以这个版本也不是我们想要的。</p>
<h2 id="SingletonV4"><a href="#SingletonV4" class="headerlink" title="SingletonV4"></a>SingletonV4</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV4</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonV4 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV4</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (SingletonV4.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                    sInstance = <span class="keyword">new</span> SingletonV4();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本最大的改进是在第三个版本的基础上实现了双层检测，在某种层度上，性能有所提升，但是是不是就没有安全问题了，不是的，这个版本也不是我们想要的，因为在指令重排的情况下，会出错，在这里也不打算展开讲为什么会出现这中诡异的现象，有想知道原因的，可以在评论里，向我提问。</p>
<h2 id="SingletonV5"><a href="#SingletonV5" class="headerlink" title="SingletonV5"></a>SingletonV5</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV5</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonV5 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV5</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (SingletonV5.class) &#123;</div><div class="line">                sInstance = <span class="keyword">new</span> SingletonV5();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本有在并发的环境下很难保证单例，也有可能报错。</p>
<h2 id="SingletonV6"><a href="#SingletonV6" class="headerlink" title="SingletonV6"></a>SingletonV6</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV6</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonV6 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV6</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getInstance();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (SingletonV6.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                    sInstance = <span class="keyword">new</span> SingletonV6();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本算比较完美了，在某种条件下，保证了单例，同时性能也有了一定的保证，同时反序列化也保证了单例，但是这种是不是也就没问题了，错了，这个版本在jdk1.5之后才能算完美，以前版本还是有问题的, 这里不展开讲原因，有疑问的同学在下面的评论，可以向我提问。</p>
<h2 id="SingletonV7"><a href="#SingletonV7" class="headerlink" title="SingletonV7"></a>SingletonV7</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  SingletonV7 &#123;</div><div class="line">    INSTANCE</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本是上一个版本的增强版，同时也是最优雅的版本，也是最为安全的版本，性能也是较好的版本，同时基于自身特点保证了序列化，反序列化的安全，同时也是目前最为推荐使用的单例版本，这里不展开讲原因，有兴趣的同学，可以在下面的评论，向我提问。</p>
<h2 id="SingletonV8"><a href="#SingletonV8" class="headerlink" title="SingletonV8"></a>SingletonV8</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV8</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV8</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonV8 INSTANCE = <span class="keyword">new</span> SingletonV8();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV8 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本也是虚拟机能够保证安全的版本，但是需要额外的内部类提供保证，空间复杂度比上面版本大，综合考虑还是考虑枚举版本</p>
<h2 id="SingletonV9"><a href="#SingletonV9" class="headerlink" title="SingletonV9"></a>SingletonV9</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV9</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonV9 INSTANCE = <span class="keyword">new</span> SingletonV9();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV9</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV9 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本也是安全的，但是有个缺陷就是这个类只要其中有个静态成员加载，那么就会创建对象，也是我们经常说的饿汉式模式，上面的版本都是懒汉式模式，对于这两种模式不太了解的，可以在下面的评论，向我提问。</p>
<h2 id="SingletonV10"><a href="#SingletonV10" class="headerlink" title="SingletonV10"></a>SingletonV10</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV10</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonV10 sInstance;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicBoolean FLAG = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV10</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV10 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (; ; ) &#123;</div><div class="line">            <span class="keyword">if</span> (FLAG.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</div><div class="line">                sInstance = <span class="keyword">new</span> SingletonV10();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (sInstance != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本是用CAS的无阻塞，乐观锁的特性实现</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol>
<li>对象创建的不同方式，以及不同点</li>
<li>对象的创建过程</li>
<li>classloader的namespace</li>
<li>虚拟机实例的个数对对象的影响</li>
<li>继承对对象创建的影响</li>
<li>对象代码复用</li>
<li>对象锁，类锁，全局锁的区别</li>
<li>锁中的坑</li>
</ol>
<blockquote>
<p>这篇由于主要由浅入深的讲解单例，上面的扩展就不展开讲了，如果有感兴趣的同学，可以在评论里，向我提问，我会详细解答的，后面的文章我也会由浅入深的讲解。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看似很简单一种设计模式，其实我们深入思考一下，就没那么简单了，中间有很多技术点，有很多细节需要我们去挖掘，思考，最后推荐SingletonV7版本，注意这个只是保证了对象创建安全，对象成员的安全，还需要我们自己去保证。希望阅读过这篇文章的同学，再也不要写不安全的单例对象代码了，代码改进的一小步，程序稳定，可靠的一大步。</p>
<h2 id="可能的疑问"><a href="#可能的疑问" class="headerlink" title="可能的疑问"></a>可能的疑问</h2><p>有的同学可能会在想，客户端平台不是不建议enum吗？确实没错，那是很早以前android官网也不建议使用，但是现在你去看官网还能看到那句话吗？google已经去掉了，至于为什么去掉了，我个人认为，有几种可能的原因，第一个是目前机器的配置，现在的cpu，内存等配置跟以前都不是在一个级别上，第二个就是软件层运行时对代码优化。另外还有<code>JakeWharton</code>大神都不考虑这个了，我们还有什么理由考虑这些了，其实真的没必要考虑这个了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;单例模式真的不简单，但是单例模式也是我们开发中常用的一种设计模式,然而不管Github上开源的代码，还是很多开发同学写的单例模式，百花齐放，百家争鸣，各种版本，这篇文章我想跟大家聊聊我心中的单例模式，同时我会给出我心目中的单例模式的各种版本，同时会给出不同版本的优缺点，以及我们最后应该选用哪个版本才是最为安全，优雅，同时性能也是比较好的，最后我想说，安全，性能是一个折中的考虑。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://jackwaylong.github.io/categories/java/"/>
    
    
      <category term="single" scheme="http://jackwaylong.github.io/tags/single/"/>
    
      <category term="volatile" scheme="http://jackwaylong.github.io/tags/volatile/"/>
    
      <category term="synchronized" scheme="http://jackwaylong.github.io/tags/synchronized/"/>
    
      <category term="enum" scheme="http://jackwaylong.github.io/tags/enum/"/>
    
  </entry>
  
  <entry>
    <title>揭开Gradle的神秘面纱</title>
    <link href="http://jackwaylong.github.io/2016/11/29/gradle/"/>
    <id>http://jackwaylong.github.io/2016/11/29/gradle/</id>
    <published>2016-11-28T16:32:01.000Z</published>
    <updated>2016-11-28T17:00:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.processon.com/chart_image/583c622fe4b0e742e43f7055.png"></p>
<blockquote>
<p>gradle前言</p>
<p>在解开gradle神秘面纱前,我想说一下gradle是如此的强大,在我看来在目前互联网爆炸的时代,构建工具也不少,比如以前我接触的Ant,maven等,在这里只想说我接触gradle并且去研究之后,从此我就爱上了gradle的强大，灵活，高效，并且可以让我们android开发者上手快，这是因为我们android开发的主要语言是java，java是基于虚拟的一种语言，而gradle的最终产物也是java子节码，所以我认为我们写gadle代码就是写业务代码，当然也有不同，那就是dsl特性，后面会慢慢展开讲解，让大家真正的去理解gradle的强大，并且能够真正的在as的强大能力下，能够将gardle真正运用好，提高开发效率。这里我并不是吐槽其他构件工具不好,没有最好，只有更好，更适合，从客户端构件角度来看，我个人觉得gradle非常适合，下面将解开gradle一层一层的面纱。<br><a id="more"></a><br>gradle大纲</p>
<ul>
<li>gradle是什么</li>
<li>gradle的好处</li>
<li>gradle内部构建原理</li>
<li>如何使用gradle提高工作效率</li>
<li>gradle工程构建流</li>
<li>gradle实战</li>
</ul>
</blockquote>
<h2 id="gradle是什么"><a href="#gradle是什么" class="headerlink" title="gradle是什么"></a>gradle是什么</h2><blockquote>
<p>gradle其实是一套构件工具机,使用groovy语言的DSL特性以及java的灵活特性进行构建,还有很多特性大家可以去<a href="https://gradle.org/" target="_blank" rel="external">gradle.org</a>官网进行深入的学习或者<code>google</code>找相关资料了解</p>
</blockquote>
<h2 id="gradle的好处"><a href="#gradle的好处" class="headerlink" title="gradle的好处"></a>gradle的好处</h2><blockquote>
<p>其实我们学习一门技术肯定是有对应的好处我们才去学习对吧,不管好处多大,起码能帮助我们工作,毕竟我们都是上班的码农,我个人认为gradle最大的好处就是能够让我们更关注我们最关注的，不需要关注那些与我们关系不大的，毕竟我们不需要关注，然而这样就让我们失去了很多的深入学习的机会，导致我们养成了只要能用就行的思维，在我看来懒惰使人进步，为了想懒惰我一定要去思考如何自动化的去解决问题，gradle满足了我的目标，非常强大。</p>
</blockquote>
<h2 id="gradle的内部构建原理"><a href="#gradle的内部构建原理" class="headerlink" title="gradle的内部构建原理"></a>gradle的内部构建原理</h2><blockquote>
<p>在讲解内部构件原理之前，我想讲解下我是如何去理解gradle这玩意的，gradle按照一般写业务代码的思维还是有点区别的，毕竟领域不同，gradle写的是脚本，却运行的java子节码，所以我这么思考，我用写java运行时的思维去写gradle脚本，然后学习gradle dsl特性，这样以来，理解这个构建工具就非常流畅了，不然我是理解不好的，每个人都有自己的理解方式，找自己最好的理解方式就好。gradle构建内部运行机制是这样的，首先初始化构建引擎，然后将脚本转换成java代码,然后就是我们最熟悉的构建过程了,将java代码转换成子节码,然后交给虚拟机加载执行</p>
</blockquote>
<h2 id="如何使用gradle提高工作效率"><a href="#如何使用gradle提高工作效率" class="headerlink" title="如何使用gradle提高工作效率"></a>如何使用gradle提高工作效率</h2><blockquote>
<p>我个人认为构建工具毕竟是一种工具特性,那么就一套完善的高效特性让我去挖掘,我目前挖掘的有利用as的工程特性，结合gradle的强大构建特性，自动化分析文件，自动化打包，模版构建，后面不断有新的挖掘，我相信只要是工具类的东西然后结合我们的技术手段那么肯定会提高我们的工作效率，可能需要手动10分钟的事情，而用gradle处理只要1分钟，甚至更短，错误几率也大大减低，减除人工干预，毕竟现在是人工智能时代，感觉我们会被计算机征服，真可怕，我们唯一能做的就是提升自己。</p>
</blockquote>
<h2 id="gradle工程构建流"><a href="#gradle工程构建流" class="headerlink" title="gradle工程构建流"></a>gradle工程构建流</h2><blockquote>
<p>as gradle工程构建流图示</p>
</blockquote>
<p><img src="https://www.processon.com/chart_image/582570bce4b0fa6ffba35f85.png"></p>
<p><img src="https://www.processon.com/chart_image/58257525e4b00c4fc871d544.png"></p>
<h2 id="gradle实战"><a href="#gradle实战" class="headerlink" title="gradle实战"></a>gradle实战</h2><blockquote>
<p>构建脚本集</p>
<ol>
<li><a href="">settings.gradle</a></li>
<li><a href="">root build.gradle</a></li>
<li><a href="">init.gradle</a></li>
<li><a href="">utils.gradle</a></li>
<li><a href="">tasks.gradle</a></li>
<li><a href="">submodle build.gradle</a></li>
<li><a href="">common.properties</a></li>
<li><a href="">template/project.properties</a></li>
<li><a href="">publish.bat/publish.sh</a></li>
<li><a href="">properties</a></li>
</ol>
</blockquote>
<h2 id="gradle插件开发"><a href="#gradle插件开发" class="headerlink" title="gradle插件开发"></a>gradle插件开发</h2><blockquote>
<p>插件开发基本流程</p>
<ol>
<li>插件工程一般结构</li>
<li>插件开发语言(java,gradle,groovy等等)</li>
<li>插件打包</li>
<li>插件部署</li>
<li>插件访问</li>
</ol>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>到此gradle基本构建流已经说完了,这些只是构建的开始,后面我还会继续深入gradle在组件化开发中的作用以及强大支撑，只有明白了gradle的基本工作原理，我们才能更好的去灵活运用gradle来拆分我们的工程，很好的解耦我们的工程，目前比较的多的开发模式有组件化，插件化，我个人理解gradle就是开发模式的驱动者，学好gradle才是根本，才能很好的进行模式开发，gradle网上的指导资料很少，基本都是一些用法，没有分析原理的，对于技术者我强烈建议学习一门技术还是去对应的官网，这样不仅仅能系统的学习，并且还能更为深入的理解语言的本质。</p>
</blockquote>
<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><blockquote>
<p>工程构建一般是跨界的，也就是说可能会涉及到很多种技术的融合，我目前接触到的有python，groovy，bash，bat 等脚本语言，希望大家不要仅仅停留在android业务开发中，技术融合才能让自己强大，多学习不同技术提高自己的维度，深度，广度。</p>
</blockquote>
<h2 id="后续gradle学习计划"><a href="#后续gradle学习计划" class="headerlink" title="后续gradle学习计划"></a>后续gradle学习计划</h2><ol>
<li>继续深入gradle构建流</li>
<li>gradle源码分析</li>
<li>发现gradle中好玩的东西，灵活运用到实际项目中</li>
<li>基于gradle构建项目到产品输出闭环</li>
</ol>
<h2 id="gradle项目地址"><a href="#gradle项目地址" class="headerlink" title="gradle项目地址"></a>gradle项目地址</h2><ul>
<li><a href="https://github.com/jackwaylong/Gradle/archive/master.zip" target="_blank" rel="external">下载</a></li>
<li><a href="https://github.com/jackwaylong/gradle" target="_blank" rel="external">github查看</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.processon.com/chart_image/583c622fe4b0e742e43f7055.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gradle前言&lt;/p&gt;
&lt;p&gt;在解开gradle神秘面纱前,我想说一下gradle是如此的强大,在我看来在目前互联网爆炸的时代,构建工具也不少,比如以前我接触的Ant,maven等,在这里只想说我接触gradle并且去研究之后,从此我就爱上了gradle的强大，灵活，高效，并且可以让我们android开发者上手快，这是因为我们android开发的主要语言是java，java是基于虚拟的一种语言，而gradle的最终产物也是java子节码，所以我认为我们写gadle代码就是写业务代码，当然也有不同，那就是dsl特性，后面会慢慢展开讲解，让大家真正的去理解gradle的强大，并且能够真正的在as的强大能力下，能够将gardle真正运用好，提高开发效率。这里我并不是吐槽其他构件工具不好,没有最好，只有更好，更适合，从客户端构件角度来看，我个人觉得gradle非常适合，下面将解开gradle一层一层的面纱。&lt;br&gt;
    
    </summary>
    
      <category term="groovy" scheme="http://jackwaylong.github.io/categories/groovy/"/>
    
    
      <category term="gradle" scheme="http://jackwaylong.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>modularity</title>
    <link href="http://jackwaylong.github.io/2016/11/27/modularity/"/>
    <id>http://jackwaylong.github.io/2016/11/27/modularity/</id>
    <published>2016-11-27T08:50:54.000Z</published>
    <updated>2016-11-27T09:53:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>主题大纲</p>
<ol>
<li>什么是组件化</li>
<li>什么是插件化</li>
<li>为什么要组件化</li>
<li>如何组件化</li>
<li>组件化的基本模型</li>
<li>组件化开发中的问题</li>
<li>组件化测试</li>
<li>组件化组件编译</li>
<li>组件化打包</li>
<li>组件化开发闭环链接系统</li>
<li>Q&amp;A</li>
</ol>
</blockquote>
<a id="more"></a>
<h2 id="什么是组件化"><a href="#什么是组件化" class="headerlink" title="什么是组件化"></a>什么是组件化</h2><p>在了解组件化之前,我们首先回顾一下目前非组件化工程的基本结构,首先我想说大家最想说的是as编译太慢,编译让人蓝瘦香菇，并且谁者业务需求越来越多，代码越来越多，编译时间线性增加，有些同学可能会通过自己机器的配置对应的设置，as的编译配置文件，增量编译，但是这样的结果还不是很明显，一方面由于as对增量编译的支持力度，在这个过程中有代码缓存问题。我们通过clean去解决，这样会导致重新build，从而导致编译时间还是很长，编译就像as给予我们放松的时刻。面对上面的这些问题，我相信我们很多同学都思考过，拆分当个工程为多个工程，然后模块编译，模块测试，最后整合若干模块称为一个apk，没错，思路是对的，但是为什么这些理论很难得到实践了。这就是我们经常说的，理想很丰满，现实很骨感。当我们找到一个理论突破口的时候，就感觉很满足，就觉得就这样。我想说我们必须实践，熟话说，实践才是检验真理的唯一标准，我们需要思考，学习，实践，用理论去解决实际问题。我个人认为as与生俱来就是提供开发者模块化的ide，很多同学可能有疑问，为什么这么认为，我们开发时仅仅把as看作一个开发辅助工具，但是我们站在更高的角度去思考，其实as给我们不仅仅是一种工具，而是一种给予我们基于这个工具去能创造，创新开发模式的软件。明白了这些，那么组件化到底是什么了，我看目前网上关于组件化开发的文章，这说明也有很多在开发中实践的，我个人认为还是不够完善，或者说很多问题，很多坑。我对组件化的理解就是module化开发，module测试，module打包，module发包，module集成，module暴露，下面详细说这些具体怎么做。</p>
<h2 id="什么是插件化"><a href="#什么是插件化" class="headerlink" title="什么是插件化"></a>什么是插件化</h2><p>有的同学很能有很大的疑问，主题是组件化，为什么要了解什么是插件化，这里只是说明一下插件化与组件化的区别，让我们实践过程中能够分清开发界限，能够将组件化做的更好。插件化是很多的开发模式，我们明白一点就可以了，插件化是单独的apk，jar，zip，dex，资源，so等。将这些进行动态加载，然而组件化本质还是一个主apk。不管多少module，最后都会整合成一个apk。所以我们就有了更新的开发模式，组件化中插件化，这里不详细展开说，今天主题是组件化，我们专一讲好一个主题，后面再安排讲解这种模式。</p>
<h2 id="为什么要组件化"><a href="#为什么要组件化" class="headerlink" title="为什么要组件化"></a>为什么要组件化</h2><p>一开始我们讲解了，什么组件化，以及组件化的好处，以及组件化的大致几个流程，有的同学可能还有很多的疑问，我们一个app运行起来，如果机器配置好点，速度也挺快的，写代码写起来也很舒服，组件化也没必要，可能还认为组件化开发流程复杂，带给我们的价值不大。我想说作为开发者千万不要这么想，我们要想的是这种模式能不能适合我们的场景，任何一种技术都是有场景范围的，不是universal的。我个人认为组件化最大的好处就是解耦合，最大程度的并行开发，非常适合自动化测试，非常适合代码管理，这些同学们不能很好的体会，后面我都会通过事例来讲解，先心中有个印象。</p>
<h2 id="如何组件化"><a href="#如何组件化" class="headerlink" title="如何组件化"></a>如何组件化</h2><p> 组件化开发要简单也可以很简单，要复杂也可以很复杂，但是我们开发就是要偷懒，要写脚本自动化执行我们重复的工作。所以我们如何将复杂的事情转化成简单的脚本，让as帮我们去加载执行。既然组件化是基于as的，那么首先我们需要学习gradle脚本的编写，groovy语言的学习，不同平台的脚本语言学习，比如mac下面的bash语言学习，还有一门辅助脚本的学习python，这些都可以让我们的组件化开发高效，从而提高开发效率，降低开发成本。没有做过组件化架构搭建的同学可能一下子就懵了，这些我都不要会，就会写基础代码，大多数都一样，不会我们学习就好，够用就好，然后不断去深入学习。有了这些基础的东西，下面进展就会比较顺利，不然后面可能很多问题。接下来我们就是需要拆分模块，同时引入基础库，初始化基本配置，配置依赖，这些后面我会通过演示的方式进行讲解。</p>
<h2 id="组件化的基本模型"><a href="#组件化的基本模型" class="headerlink" title="组件化的基本模型"></a>组件化的基本模型</h2><p>基于我对组件化开发的实践，与团队对组件化的理解，我总结出了一套开发模型基本图</p>
<h2 id="组件化开发中的问题"><a href="#组件化开发中的问题" class="headerlink" title="组件化开发中的问题"></a>组件化开发中的问题</h2><p>其实组件化开发中很多问题需要我们解决，我遇到的有，依赖关系的处理，资源重复(通过添加资源前缀)，清单文件的冲突(tools)，打包运行崩溃，直接依赖aar,jar等</p>
<h2 id="组件化测试"><a href="#组件化测试" class="headerlink" title="组件化测试"></a>组件化测试</h2><p>由于业务需求多，我想同学们基本都是很少测试的，即使测试也是run一下，没有写单元测试，这很大原因是写测试代码需要发费很多时间，需要编译整个工程，编译时间太长。组件化之后，我们就很容易测试自己负责的module了，并不需要加载其他人写的module，目前我们可以用自测方式测试，不用自动化测试框架之内的，看个人对测试的兴趣，这部分我也会通过演示的方式，进行讲解,同时可能涉及到application访问的问题，即使在app容器里面也有类似的问题。</p>
<h2 id="组件化组件编译"><a href="#组件化组件编译" class="headerlink" title="组件化组件编译"></a>组件化组件编译</h2><p>组件化编译每个module都是一个aar，所以我们依赖直接aar就好，但是这里需要注意一个问题，就是必须依赖带有依赖文件的aar，比如pom文件，不管本地的还是服务端的，不然运行时可能出现Class找不到的情况。还有一些是生成jar包，直接依赖就好，如果组件化中有插件加载机制，需要注意插件工程依赖共同jar时重复打包问题，provider模式解决这种问题。</p>
<h2 id="组件化打包"><a href="#组件化打包" class="headerlink" title="组件化打包"></a>组件化打包</h2><p>组件化打包其实就是将aar进行整合，然后生成一个apk文件。这个apk可以单独加载，也可以单独运行。</p>
<h2 id="组件化开发闭环链接系统"><a href="#组件化开发闭环链接系统" class="headerlink" title="组件化开发闭环链接系统"></a>组件化开发闭环链接系统</h2><p>组件化闭环系统基本组成:git源代码管理,maven二进制包管理,jenkins打包管理,gerrit代码审查等其他辅助系统，比如mail系统，短信系统。</p>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>同学们的疑问与解答</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主题大纲&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是组件化&lt;/li&gt;
&lt;li&gt;什么是插件化&lt;/li&gt;
&lt;li&gt;为什么要组件化&lt;/li&gt;
&lt;li&gt;如何组件化&lt;/li&gt;
&lt;li&gt;组件化的基本模型&lt;/li&gt;
&lt;li&gt;组件化开发中的问题&lt;/li&gt;
&lt;li&gt;组件化测试&lt;/li&gt;
&lt;li&gt;组件化组件编译&lt;/li&gt;
&lt;li&gt;组件化打包&lt;/li&gt;
&lt;li&gt;组件化开发闭环链接系统&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="android" scheme="http://jackwaylong.github.io/categories/android/"/>
    
    
      <category term="modularity" scheme="http://jackwaylong.github.io/tags/modularity/"/>
    
  </entry>
  
</feed>
