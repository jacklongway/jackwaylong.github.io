<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>longway&#39;s blog</title>
  <subtitle>Technology change the world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jackwaylong.github.io/"/>
  <updated>2016-12-17T03:18:03.000Z</updated>
  <id>http://jackwaylong.github.io/</id>
  
  <author>
    <name>龙伟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重排序</title>
    <link href="http://jackwaylong.github.io/2016/12/17/JMM-1/"/>
    <id>http://jackwaylong.github.io/2016/12/17/JMM-1/</id>
    <published>2016-12-17T02:50:07.000Z</published>
    <updated>2016-12-17T03:18:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>首先我们都知道，android开发的主要语言是java，其实android上的java还是有点区别的，<br>在此不展开讲解，这篇专注内存模型，内存重排的问题进行讲解。很多人可能在想，重排是什么<br>鬼，什么情况下会出现重排，重排对程序有是否影响，怎么避免重排等等一系列的疑问。下面我<br>对每个疑问进行剖析。</p>
</blockquote>
<a id="more"></a>
<h2 id="话题大纲"><a href="#话题大纲" class="headerlink" title="话题大纲"></a>话题大纲</h2><ol>
<li>数据依赖性</li>
<li>as-if-serial</li>
<li>程序顺序规则，也就是happens－before规则</li>
<li>重排对多线程的影响</li>
</ol>
<h2 id="数据依赖"><a href="#数据依赖" class="headerlink" title="数据依赖"></a>数据依赖</h2><p>如果两个操作访问同一个变量，且两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖性，你如：<br>a=1;b=a; b依赖a的写操作。这种情况下，会阻止重排，因为重排之后，必然导致最后结果不一致，但是在很多<br>场景下，我们写的代码都有这种依赖存在。</p>
<h2 id="as-if-serial"><a href="#as-if-serial" class="headerlink" title="as-if-serial"></a>as-if-serial</h2><p>这个规则简单的来说就是对编译器。runtime，cpu的一种约束，单线程条件下，重排之后，最后结果要一致, 这些约束并不能保证多线程环境下成立。所以在并发的环境下，需要我们自己保证这种约束。</p>
<h2 id="程序顺序规则，也就是happens－before规则"><a href="#程序顺序规则，也就是happens－before规则" class="headerlink" title="程序顺序规则，也就是happens－before规则"></a>程序顺序规则，也就是happens－before规则</h2><ol>
<li>A happens- before B；</li>
<li>B happens- before C；</li>
<li>A happens- before C；</li>
</ol>
<p>这里的第3个happens- before关系，是根据happens- before的传递性推导出来的。<br>这里A happens- before B，但实际执行时B却可以排在A之前执行（看上面的重排序后的执行顺序）。在第一章提到过，如果A happens- before B，JMM并不要求A一定要在B之前执行。JMM仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前。这里操作A的执行结果不需要对操作B可见；而且重排序操作A和操作B后的执行结果，与操作A和操作B按happens- before顺序执行的结果一致。在这种情况下，JMM会认为这种重排序并不非法（not illegal），JMM允许这种重排序。<br>在计算机中，软件技术和硬件技术有一个共同的目标：在不改变程序执行结果的前提下，尽可能的开发并行度。编译器和处理器遵从这一目标，从happens- before的定义我们可以看出，JMM同样遵从这一目标。</p>
<h2 id="重排对多线程的影响"><a href="#重排对多线程的影响" class="headerlink" title="重排对多线程的影响"></a>重排对多线程的影响</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReorderExample</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</div><div class="line">    a = <span class="number">1</span>; <span class="comment">//1</span></div><div class="line">    flag = <span class="keyword">true</span>;<span class="comment">//2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (flag) &#123;<span class="comment">//3</span></div><div class="line">        <span class="keyword">int</span> i =  a * a;<span class="comment">//4</span></div><div class="line">        ……</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>多线程情况下rw操作就可能出现很多不确定性，大概有以下场景，w操作重排，r操作cpu内部重排，最后的结果不言而喻。这里我们看到是重排对多线程的影响，如果是单线程就不存在重排的概念了。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol>
<li>内存重排的解决方法（volatile）</li>
<li>内存可见性与重排的关系</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先我们都知道，android开发的主要语言是java，其实android上的java还是有点区别的，&lt;br&gt;在此不展开讲解，这篇专注内存模型，内存重排的问题进行讲解。很多人可能在想，重排是什么&lt;br&gt;鬼，什么情况下会出现重排，重排对程序有是否影响，怎么避免重排等等一系列的疑问。下面我&lt;br&gt;对每个疑问进行剖析。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://jackwaylong.github.io/categories/java/"/>
    
    
      <category term="dependencies" scheme="http://jackwaylong.github.io/tags/dependencies/"/>
    
      <category term="controlFlow" scheme="http://jackwaylong.github.io/tags/controlFlow/"/>
    
      <category term="resort" scheme="http://jackwaylong.github.io/tags/resort/"/>
    
  </entry>
  
  <entry>
    <title>CAS为什么如此的乐观了?</title>
    <link href="http://jackwaylong.github.io/2016/12/13/cas-1/"/>
    <id>http://jackwaylong.github.io/2016/12/13/cas-1/</id>
    <published>2016-12-13T03:33:21.000Z</published>
    <updated>2016-12-13T06:15:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>CAS（Compare and swap）比较和替换是设计并发算法时用到的一种技术。简单来说，比较和替换是使用一个期望值和一个变量的当前值进行比较，<br>如果当前变量的值与我们期望的值相等，就使用一个新值替换当前变量的值。这听起来可能有一点复杂但是实际上你理解之后发现很简单，<br>接下来，让我们更深入的了解一下这项技术。</p>
</blockquote>
<a id="more"></a>
<h2 id="议题大纲"><a href="#议题大纲" class="headerlink" title="议题大纲"></a>议题大纲</h2><ol>
<li>cas是什么</li>
<li>cas是怎么做到无锁原子操作的</li>
<li>cas跟synchronized,lock等锁机制的区别是什么</li>
<li>cas的性能如何</li>
<li>cas使用过程中我们需要注意的问题是什么</li>
</ol>
<h2 id="cas-是什么"><a href="#cas-是什么" class="headerlink" title="cas 是什么"></a>cas 是什么</h2><p>cas通俗的讲就是一种比较交换的操作，但是这个操作跟普通操作不太一样，<br>主要不一样的是，这个操作可能失败，需要重试。同时cas不是虚拟机层面<br>的原子保证，是利用cpu指令实现的一种原子保证，利用cpu总线，缓存实现<br>的一种无锁并发技术。</p>
<h2 id="cas是怎么做到无锁原子操作的"><a href="#cas是怎么做到无锁原子操作的" class="headerlink" title="cas是怎么做到无锁原子操作的"></a>cas是怎么做到无锁原子操作的</h2><p>利用cpu指令集同时cpu的总线，缓存特性。其实cpu层还是加锁的，<br>只是将虚拟机层面的加锁，委派给了cpu层面。</p>
<h2 id="cas跟synchronized等锁机制的区别是什么"><a href="#cas跟synchronized等锁机制的区别是什么" class="headerlink" title="cas跟synchronized等锁机制的区别是什么"></a>cas跟synchronized等锁机制的区别是什么</h2><p>cas是一种乐观锁，而<code>synchronized</code>是一种悲观锁，乐观的也是就是，如果原子操作<br>失败，会重试，悲观的就不会。</p>
<h2 id="cas的性能如何"><a href="#cas的性能如何" class="headerlink" title="cas的性能如何"></a>cas的性能如何</h2><p>cas由于需要重试，所以性能上可能有点损失，在临界资源竞争激烈的情况下，但是总体性能还是乐观的。</p>
<h2 id="cas使用过程中我们需要注意的问题是什么"><a href="#cas使用过程中我们需要注意的问题是什么" class="headerlink" title="cas使用过程中我们需要注意的问题是什么"></a>cas使用过程中我们需要注意的问题是什么</h2><p>cas 由于是一种基于比较交换机制，所以我们在一些场景一定要重试，重新获取，才能真正的保证数据<br>的准确性，一致性，安全性。</p>
<blockquote>
<p>cas我们有哪些场景了，其实android里面场景就很多，我们看几个简单的场景.</p>
</blockquote>
<h2 id="View-id的产生"><a href="#View-id的产生" class="headerlink" title="View id的产生"></a>View id的产生</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">generateViewId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> result = sNextGeneratedId.get(); <span class="comment">// 获取当前id</span></div><div class="line">            <span class="comment">// aapt-generated IDs have the high byte nonzero; clamp to the range under that.</span></div><div class="line">            <span class="keyword">int</span> newValue = result + <span class="number">1</span>; <span class="comment">// 新的id</span></div><div class="line">            <span class="keyword">if</span> (newValue &gt; <span class="number">0x00FFFFFF</span>) newValue = <span class="number">1</span>; <span class="comment">// Roll over to 1, not 0. // 可能跟aapt工具产生的冲突，需要回滚</span></div><div class="line">            <span class="keyword">if</span> (sNextGeneratedId.compareAndSet(result, newValue)) &#123;  <span class="comment">// 自旋设置最新值，如果失败，需要重试</span></div><div class="line">                <span class="keyword">return</span> result;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个是<code>android View</code>里面的一个类方法，当我们动态setId的时候，如果id无效，那么会调用这个方法自动产生一个<br>有效的id，这里用cas机制实现了，id的有效性, 同时也佩服google的工程师，考虑问题很全，这里aapt产生的id不会在<br>新值之内，做了过滤，比如系统资源0x01开头，应用资源0x7F开头，<code>0x00FFFFFF</code>这个值就是临界值，所以我们在插件开发<br>的时候，也需要兼容框架层一下，我们定制aapt也是用开始的一个字节。</p>
<h2 id="AtomicBoolean-源码剖析"><a href="#AtomicBoolean-源码剖析" class="headerlink" title="AtomicBoolean 源码剖析"></a>AtomicBoolean 源码剖析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicBoolean</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4654671469794556979L</span>;</div><div class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            valueOffset = unsafe.objectFieldOffset</div><div class="line">                (AtomicBoolean.class.getDeclaredField(<span class="string">"value"</span>)); <span class="comment">// jni层的偏移值，为了后面的自旋比较</span></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value; <span class="comment">// 最新值</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates a new &#123;<span class="doctag">@code</span> AtomicBoolean&#125; with the given initial value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> initialValue the initial value</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomicBoolean</span><span class="params">(<span class="keyword">boolean</span> initialValue)</span> </span>&#123;</div><div class="line">        value = initialValue ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates a new &#123;<span class="doctag">@code</span> AtomicBoolean&#125; with initial value &#123;<span class="doctag">@code</span> false&#125;.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomicBoolean</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the current value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> the current value</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Atomically sets the value to the given updated value</div><div class="line">     * if the current value &#123;<span class="doctag">@code</span> ==&#125; the expected value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> expect the expected value</div><div class="line">     * <span class="doctag">@param</span> update the new value</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful. False return indicates that</div><div class="line">     * the actual value was not equal to the expected value.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">boolean</span> expect, <span class="keyword">boolean</span> update)</span> </span>&#123; <span class="comment">// 这个方法是final</span></div><div class="line">        <span class="keyword">int</span> e = expect ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> u = update ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, e, u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Atomically sets the value to the given updated value</div><div class="line">     * if the current value &#123;<span class="doctag">@code</span> ==&#125; the expected value.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;&lt;a href="package-summary.html#weakCompareAndSet"&gt;May fail</div><div class="line">     * spuriously and does not provide ordering guarantees&lt;/a&gt;, so is</div><div class="line">     * only rarely an appropriate alternative to &#123;<span class="doctag">@code</span> compareAndSet&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> expect the expected value</div><div class="line">     * <span class="doctag">@param</span> update the new value</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">weakCompareAndSet</span><span class="params">(<span class="keyword">boolean</span> expect, <span class="keyword">boolean</span> update)</span> </span>&#123; <span class="comment">// 这个跟compareAndSet逻辑一样，但是不是final，意味着子类可以覆盖逻辑，进行自定义</span></div><div class="line">        <span class="keyword">int</span> e = expect ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> u = update ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, e, u); <span class="comment">// cas操作</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Unconditionally sets to the given value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> newValue the new value</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">boolean</span> newValue)</span> </span>&#123;</div><div class="line">        value = newValue ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Eventually sets to the given value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> newValue the new value</div><div class="line">     * <span class="doctag">@since</span> 1.6</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(<span class="keyword">boolean</span> newValue)</span> </span>&#123; <span class="comment">// 延迟设置到最新值</span></div><div class="line">        <span class="keyword">int</span> v = newValue ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        unsafe.putOrderedInt(<span class="keyword">this</span>, valueOffset, v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Atomically sets to the given value and returns the previous value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> newValue the new value</div><div class="line">     * <span class="doctag">@return</span> the previous value</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">boolean</span> newValue)</span> </span>&#123; <span class="comment">// 获取旧值，设置最新值</span></div><div class="line">        <span class="keyword">boolean</span> prev;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            prev = get(); <span class="comment">// 获取旧值</span></div><div class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, newValue)); <span class="comment">// false 意味着有线程更新了value，需要轮询，保证数据的准确性，一致性。</span></div><div class="line">        <span class="keyword">return</span> prev;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the String representation of the current value.</div><div class="line">     * <span class="doctag">@return</span> the String representation of the current value</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Boolean.toString(get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>场景还有很多,<a href="http://www.jackway.cn/2016/12/03/single/" target="_blank" rel="external">比如单例场景</a> 等等。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那我们到底什么时候选择cas，什么时候选择加锁了，这个没有一定，需要根据具体场景，选择合适的方式。<br>cas总体上来说，性能优越加锁。但是当资源竞争很大的时候，轮询次数增加，导致性能有点下降。移动端并发<br>数目不会很大，如果是服务端需要对cas进一步优化。</p>
<blockquote>
<p>cas只能保证单一变量操作的原子性，如果需要保证多个变量，那么使用对象，然后数据封装到对象进行atomic，<br><code>AtomicReference</code> 有兴趣的可以了解，还有很多数据结构实现的无锁操作，也可以去学习，了解。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CAS（Compare and swap）比较和替换是设计并发算法时用到的一种技术。简单来说，比较和替换是使用一个期望值和一个变量的当前值进行比较，&lt;br&gt;如果当前变量的值与我们期望的值相等，就使用一个新值替换当前变量的值。这听起来可能有一点复杂但是实际上你理解之后发现很简单，&lt;br&gt;接下来，让我们更深入的了解一下这项技术。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://jackwaylong.github.io/categories/java/"/>
    
    
      <category term="CAS" scheme="http://jackwaylong.github.io/tags/CAS/"/>
    
  </entry>
  
  <entry>
    <title>线程启动之后可以停止吗?</title>
    <link href="http://jackwaylong.github.io/2016/12/12/thread-stop/"/>
    <id>http://jackwaylong.github.io/2016/12/12/thread-stop/</id>
    <published>2016-12-12T06:17:50.000Z</published>
    <updated>2016-12-12T06:56:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>异步任务最后都会回归到Thread这个类，所以我们很有必要深入理解一下这个类，才能<br>写基础框架，才能理解目前大名鼎鼎的线程池框架，不得不佩服并发大神<a href="http://baike.baidu.com/link?url=8gNOf1rdWwWIwgTs9jiK7YPWRCWus2QJOySxomfNQrGQVr1srHi4v-4uZrCz-TUUGG4MALDNKwkLgS-HDt0X4p5SEwZByLWAAi3hUeyxr8K" target="_blank" rel="external">Doug Lea</a><br>对java并发做出的共享，也就是很多人所说，java具有先天高并发的特性。下面分析一下我们常见的场景，任务的停止处理.</p>
</blockquote>
<h2 id="stop-有作用吗"><a href="#stop-有作用吗" class="headerlink" title="stop 有作用吗?"></a>stop 有作用吗?</h2><blockquote>
<p>肯定是不好使的, 抛出<code>UnsupportedOperationException</code>,并且如果我们程序没处理异常，直接导致程序crash<br>，那我们怎么才能stop了,下面通过两种方式实现stop,但是也是不可靠的,毕竟是一种协助stop。</p>
</blockquote>
<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><ol>
<li>stop flag</li>
<li>interrupted</li>
</ol>
<h2 id="stop-flag"><a href="#stop-flag" class="headerlink" title="stop flag"></a>stop flag</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = ThreadInterrupt.class.getSimpleName();</div><div class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isStop;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadInterrupt2</span><span class="params">()</span> </span>&#123;</div><div class="line">       start();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.run();</div><div class="line">       <span class="keyword">while</span> (!isStop) &#123;</div><div class="line">           System.out.println(<span class="string">"run......"</span>);</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               Thread.sleep(<span class="number">1000</span>);</div><div class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">               e.printStackTrace();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span> </span>&#123;</div><div class="line">       isStop = <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="interrupted"><a href="#interrupted" class="headerlink" title="interrupted"></a>interrupted</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = ThreadInterrupt.class.getSimpleName();</div><div class="line">   <span class="keyword">private</span> Thread mThread;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadInterrupt</span><span class="params">()</span> </span>&#123;</div><div class="line">       mThread = <span class="keyword">new</span> Thread(<span class="keyword">this</span>);</div><div class="line">       mThread.start();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;<span class="comment">// 判断是否被打断，但是不会清除打断标志</span></div><div class="line">           Log.e(TAG, <span class="string">"alive......"</span>);</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               Thread.sleep(<span class="number">1000</span>);</div><div class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">               e.printStackTrace();</div><div class="line">               Log.e(TAG, Thread.currentThread().interrupted() + <span class="string">""</span>);<span class="comment">// 是否打断，同时清除打断标志</span></div><div class="line">               Thread.currentThread().interrupt(); <span class="comment">// 打断复原,根据需求是否需要复原</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       Log.e(TAG, <span class="string">"stop......"</span>+Thread.currentThread().interrupted()+<span class="string">"/"</span>+Thread.currentThread().interrupted()); <span class="comment">// true/false</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">       mThread.interrupt();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>上面两种都可以实现线程的停止,那么哪种更好了，我建议用第二种，首先无需定义额外的<br>标志，然后就是代码比较清晰，充分利用了内部特性，并且更高效，可靠。</p>
<h2 id="为什么第一种实现不好了"><a href="#为什么第一种实现不好了" class="headerlink" title="为什么第一种实现不好了?"></a>为什么第一种实现不好了?</h2><p>首先需要定义额外标志，意味着需要额外的存储空间，同时<code>volatile</code> jdk1.5之前不可靠，意味着<br>不能真正停止任务，sleep必须等待有线程打断才可能停止任务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;异步任务最后都会回归到Thread这个类，所以我们很有必要深入理解一下这个类，才能&lt;br&gt;写基础框架，才能理解目前大名鼎鼎的线程池框架，不得不佩服并发大神&lt;a href=&quot;http://baike.baidu.com/link?url=8gNOf1
    
    </summary>
    
      <category term="java" scheme="http://jackwaylong.github.io/categories/java/"/>
    
    
      <category term="thread" scheme="http://jackwaylong.github.io/tags/thread/"/>
    
      <category term="runnable" scheme="http://jackwaylong.github.io/tags/runnable/"/>
    
      <category term="stop" scheme="http://jackwaylong.github.io/tags/stop/"/>
    
  </entry>
  
  <entry>
    <title>git submodule</title>
    <link href="http://jackwaylong.github.io/2016/12/08/gitsubmodule-1/"/>
    <id>http://jackwaylong.github.io/2016/12/08/gitsubmodule-1/</id>
    <published>2016-12-08T03:36:11.000Z</published>
    <updated>2016-12-08T03:45:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。</p>
</blockquote>
<p>我们举一个例子。 假设你正在开发一个网站然后创建了 Atom 订阅。 你决定使用一个库，而不是写自己的 Atom 生成代码。 你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。 如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。 如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。</p>
<p>Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。<br><a id="more"></a></p>
<h3 id="开始使用子模块"><a href="#开始使用子模块" class="headerlink" title="开始使用子模块"></a>开始使用子模块</h3><p>我们将要演示如何在一个被分成一个主项目与几个子项目的项目上开发。<br><code>git submodule add &lt;repository&gt; [path]</code>  path是可选字断，默认子模块的工程名<br>主工程添子模块之后,只会克隆工程空目录，然后进入子工程目录执行<code>git submodule init</code>, <code>git submodule update</code>或者<code>git submodule update --init</code> 拉取子工程文件,运行<code>git status</code> 你会注意到工程主目录添加了.gitmodules文件与子工程的目录,.gitmodules纪录所有子模块与物理路径的映射。<code>git diff --cached submodulename</code> 列出子模块改变，在主工程使用<code>git commit -am&#39;xxx&#39;</code>提交子模块工程的纪录为160000模式， 这是 Git 中的一种特殊模式，它本质上意味着你是将一次提交记作一项目录记录的，而非将它记录成一个子目录或者一个文件</p>
<h3 id="克隆有子模块的项目"><a href="#克隆有子模块的项目" class="headerlink" title="克隆有子模块的项目"></a>克隆有子模块的项目</h3><p>首先克隆主工程 <code>git clone &lt;repository&gt; [-b &lt;name&gt;]</code>,主工程根目录包含.gitmodules文件纪录了所有的子模块,进入子模块,执行<code>git submodule init</code> 初始化子工工程,<code>git submodule update</code> 更新子工程,简便方式<code>git clone --recursive &lt;repository&gt;</code> 递归初始化更新子工程,有时需要进入子模块<code>git merge origin/master</code> 合并上游的更新</p>
<h3 id="在包含子模块的项目上工作"><a href="#在包含子模块的项目上工作" class="headerlink" title="在包含子模块的项目上工作"></a>在包含子模块的项目上工作</h3><ol>
<li><p><strong>拉取上有修改</strong> 在项目中使用子模块的简单模型就是拉取子模块最新纪录，<code>git fetch</code>, <code>git merge origin/master</code> 拉取合并上游最新更新<br>在主工程目录运行<code>git diff --submodule</code> 显示最新提交与提交的列表,设置log默认行为<code>git config --global diff.submodule log</code> ,在主工程中更新子模块<code>git submodule update --remote &lt;submodulename&gt;</code> 此命令默认会假定你想要更新并检出子模块仓库的 master 分支。 不过你也可以设置为想要的其他分支。 例如，你想要子模块跟踪仓库的 “stable” 分支，那么既可以在 .gitmodules 文件中设置（这样其他人也可以跟踪它），也可以只在本地的 .git/config 文件中设置。 让我们在 .gitmodules 文件中设置它：<code>git config -f .gitmodules submodule.&lt;submodulename&gt;.branch &lt;branchname&gt;</code> 如果不用 -f .gitmodules 选项，那么它只会为你做修改。但是在仓库中保留跟踪信息更有意义一些，因为其他人也可以得到同样的效果。如果你设置了配置选项 status.submodulesummary，Git 也会显示你的子模块的更改摘要：<code>git config status.submodulesummary 1</code> ,这时如果运行 git diff，可以看到我们修改了 .gitmodules 文件，同时还有几个已拉取的提交需要提交到我们自己的子模块项目中。这非常有趣，因为我们可以直接看到将要提交到子模块中的提交日志。 提交之后，你也可以运行 git log -p 查看这个信息。<code>git log -p --submodule</code> 当运行 <code>git submodule update --remote</code> 时，Git 默认会尝试更新所有子模块，所以如果有很多子模块的话，你可以传递想要更新的子模块的名字。在子模块上工作</p>
</li>
<li><p>你很有可能正在使用子模块，因为你确实想在子模块中编写代码的同时，还想在主项目上编写代码（或者跨子模块工作）。 否则你大概只能用简单的依赖管理系统（如 Maven 或 Rubygems）来替代了。</p>
</li>
<li><p>现在我们将通过一个例子来演示如何在子模块与主项目中同时做修改，以及如何同时提交与发布那些修改。<br>到目前为止，当我们运行 <code>git submodule update</code> 从子模块仓库中抓取修改时，Git 将会获得这些改动并更新子目录中的文件，但是会将子仓库留在一个称作 “游离的 HEAD” 的状态。 这意味着没有本地工作分支（例如 “master”）跟踪改动。 所以你做的任何改动都不会被跟踪。</p>
</li>
<li><p>为了将子模块设置得更容易进入并修改，你需要做两件事。 首先，进入每个子模块并检出其相应的工作分支。 接着，若你做了更改就需要告诉 Git 它该做什么，然后运行 <code>git submodule update --remote</code> 来从上游拉取新工作。 你可以选择将它们合并到你的本地工作中，也可以尝试将你的工作变基到新的更改上。</p>
</li>
<li><p>首先，让我们进入子模块目录然后检出一个分支。<br><code>git checkout &lt;branchname&gt;</code><br>然后尝试用 “merge” 选项。 为了手动指定它，我们只需给 update 添加 –merge 选项即可。 这时我们将会看到服务器上的这个子模块有一个改动并且它被合并了进来。<br><code>git submodule update --remote --merge</code><br>如果我们现在更新子模块，就会看到当我们在本地做了更改时上游也有一个改动，我们需要将它并入本地。<br><code>git submodule update --remote --rebase</code><br>如果你忘记 –rebase 或 –merge，Git 会将子模块更新为服务器上的状态。并且会将项目重置为一个游离的 HEAD 状态。<br><code>git submodule update --remote</code><br>即便这真的发生了也不要紧，你只需回到目录中再次检出你的分支（即还包含着你的工作的分支）然后手动地合并或变基 origin/stable（或任何一个你想要的远程分支）就行了。</p>
</li>
<li><p>如果你没有提交子模块的改动，那么运行一个子模块更新也不会出现问题，此时 Git 会只抓取更改而并不会覆盖子模块目录中未保存的工作。<br><code>git submodule update --remote</code><br>如果你做了一些与上游改动冲突的改动，当运行更新时 Git 会让你知道。<br>你可以进入子模块目录中然后就像平时那样修复冲突<br>发布子模块改动<br>现在我们的子模块目录中有一些改动。 其中有一些是我们通过更新从上游引入的，而另一些是本地生成的，由于我们还没有推送它们，所以对任何其他人都不可用。<br><code>git diff</code><br>如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到麻烦，因为他们无法得到依赖的子模块改动。 那些改动只存在于我们本地的拷贝中。</p>
</li>
<li><p>为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。 git push 命令接受可以设置为 “check” 或 “on-demand” 的 –recurse-submodules 参数。 如果任何提交的子模块改动没有推送那么 “check” 选项会直接使 push 操作失败。<br><code>git push --recurse-submodules=check</code><br>如你所见，它也给我们了一些有用的建议，指导接下来该如何做。 最简单的选项是进入每一个子模块中然后手动推送到远程仓库，确保它们能被外部访问到，之后再次尝试这次推送。<br><code>git push --recurse-submodules=on-demand</code><br>合并子模块改动</p>
</li>
<li><p>如果你其他人同时改动了一个子模块引用，那么可能会遇到一些问题。 也就是说，如果子模块的历史已经分叉并且在父项目中分别提交到了分叉的分支上，那么你需要做一些工作来修复它。</p>
</li>
<li><p>如果一个提交是另一个的直接祖先（一个快进式合并），那么 Git 会简单地选择之后的提交来合并，这样没什么问题。<br>不过，Git 甚至不会尝试去进行一次简单的合并。 如果子模块提交已经分叉且需要合并，那你会得到类似下面的信息：<br><code>git pull</code><br>所以本质上 Git 在这里指出了子模块历史中的两个分支记录点已经分叉并且需要合并。 它将其解释为 “merge following commits not found”（未找到接下来需要合并的提交），虽然这有点令人困惑，不过之后我们会解释为什么是这样。</p>
</li>
<li><p>为了解决这个问题，你需要弄清楚子模块应该处于哪种状态。 奇怪的是，Git 并不会给你多少能帮你摆脱困境的信息，甚至连两边提交历史中的 SHA-1 值都没有。 幸运的是，这很容易解决。 如果你运行 git diff，就会得到试图合并的两个分支中记录的提交的 SHA-1 值。<br><code>git diff
diff --cc DbConnector
index eb41d76,c771610..0000000
--- a/DbConnector
+++ b/DbConnector</code></p>
</li>
<li><p>所以，在本例中，eb41d76 是我们的子模块中大家共有的提交，而 c771610 是上游拥有的提交。 如果我们进入子模块目录中，它应该已经在 eb41d76 上了，因为合并没有动过它。 如果不是的话，无论什么原因，你都可以简单地创建并检出一个指向它的分支。</p>
</li>
<li><p>来自另一边的提交的 SHA-1 值比较重要。 它是需要你来合并解决的。 你可以尝试直接通过 SHA-1 合并，也可以为它创建一个分支然后尝试合并。 我们建议后者，哪怕只是为了一个更漂亮的合并提交信息。</p>
</li>
<li><p>所以，我们将会进入子模块目录，基于 git diff 的第二个 SHA 创建一个分支然后手动合并。</p>
</li>
</ol>
<h3 id="子模块技巧"><a href="#子模块技巧" class="headerlink" title="子模块技巧"></a>子模块技巧</h3><p><code>git submodule foreach &#39;git stash&#39;</code><br><code>git submodule foreach &#39;git checkout -b featureA&#39;</code><br><code>git submodule foreach &#39;git diff&#39;</code><br>有用的别名</p>
<p>你可能想为其中一些命令设置别名，因为它们可能会非常长而你又不能设置选项作为它们的默认选项。 我们在 Git 别名 介绍了设置 Git 别名，但是如果你计划在 Git 中大量使用子模块的话，这里有一些例子。</p>
<p><code>$ git config alias.sdiff &#39;!&#39;&quot;git diff &amp;&amp; git submodule foreach &#39;git diff&#39;&quot;</code><br><code>$ git config alias.spush &#39;push --recurse-submodules=on-demand&#39;</code><br><code>$ git config alias.supdate &#39;submodule update --remote --merge&#39;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们举一个例子。 假设你正在开发一个网站然后创建了 Atom 订阅。 你决定使用一个库，而不是写自己的 Atom 生成代码。 你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。 如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。 如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。&lt;/p&gt;
&lt;p&gt;Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://jackwaylong.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://jackwaylong.github.io/tags/git/"/>
    
      <category term="submodule" scheme="http://jackwaylong.github.io/tags/submodule/"/>
    
  </entry>
  
  <entry>
    <title>一线互联网公司面试简单分析</title>
    <link href="http://jackwaylong.github.io/2016/12/07/interview-1/"/>
    <id>http://jackwaylong.github.io/2016/12/07/interview-1/</id>
    <published>2016-12-07T10:46:41.000Z</published>
    <updated>2016-12-08T08:03:57.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>介绍自己负责的部分，如何实现的。</li>
<li>自定义view viewGroup</li>
<li>activity的启动流程</li>
<li>事件传递及滑动冲突的处理</li>
<li>插件化（activity如何加载及资源处理</li>
<li>内存优化 ，如何避免oom</li>
<li>内存泄漏如何处理及如何排查</li>
<li>handler问题</li>
<li>图片加载用的什么以及原理</li>
<li>从一堆数据里怎么查找最大的n个数</li>
<li>快速排序</li>
<li><p>字符串匹配</p>
<a id="more"></a>
</li>
</ol>
<h2 id="介绍自己负责的部分，如何实现的"><a href="#介绍自己负责的部分，如何实现的" class="headerlink" title="介绍自己负责的部分，如何实现的"></a>介绍自己负责的部分，如何实现的</h2><blockquote>
<p>这个把自己负责的模块说清楚就好,一般有一下几个方面可以说一下，前提是不要给自己挖坑</p>
</blockquote>
<ol>
<li>自己负责模块在整个项目中的角色,也就是功能描述</li>
<li>开发前的自己的一些思考,比如对业务的抽象,接口的定义，协议的定义等等</li>
<li>开发编码过程中遇到的难点以及坑</li>
<li>排查问题以及结解决方式</li>
<li>兼容性保证</li>
<li>性能优化</li>
<li>上线之后模块导致crash的比例</li>
</ol>
<h2 id="自定义view-viewGroup"><a href="#自定义view-viewGroup" class="headerlink" title="自定义view viewGroup"></a>自定义view viewGroup</h2><blockquote>
<p>这个就是约定的几个方法,onMeasure,onLayout,onDraw,measure,layout,draw<br>同时注意写方法的调用时机以及区别,比如onMeasure是个模版方法是在measure下调用的,这个方法在viewGroup里面,<br>自定义的这些就已经足够了，如果还扩展一些更新问题，子线程能不能更新，是可以的,在ViewRootImpl没创建之前可以更新，不同sdk这个类可能名字不一样。</p>
</blockquote>
<h2 id="activity的启动流程"><a href="#activity的启动流程" class="headerlink" title="activity的启动流程"></a>activity的启动流程</h2><blockquote>
<p>这个肯定不是说activity的生命周期，是启动加载过程,大致说下流程,具体的要自己看代码了，大致过程有:<br>这里可能分好几种情况,其实都差不很多，这里就说一种情况,startActivity这个怎么启动Activity的,<br>startActivity-&gt;ActivityManagerService-&gt;ActivityThread-&gt;Activity,大概参与就这几个核心类,里面经过了两层binder通信,最后路由到IApplicationThread,然后到ActivityThread中的H消息队列中启动Activity，细节很多，可以在评论询问。</p>
</blockquote>
<h2 id="事件传递及滑动冲突的处理"><a href="#事件传递及滑动冲突的处理" class="headerlink" title="事件传递及滑动冲突的处理"></a>事件传递及滑动冲突的处理</h2><blockquote>
<p>事件传递理解成责任链式调用就好，也就是从最内层到外层时间委派，如果事件consume了，那么就给这个view处理，不然从外向内冒泡，<br>冲突处理举个实例就好，比如SlideMenu与banner或者ListView与Scrollview的冲突等等，说出基本思路就行，这些解决一般都是重写那几个事件方法，然后各种判断就好</p>
</blockquote>
<h2 id="插件化（activity如何加载及资源处理"><a href="#插件化（activity如何加载及资源处理" class="headerlink" title="插件化（activity如何加载及资源处理)"></a>插件化（activity如何加载及资源处理)</h2><blockquote>
<p>Activity使用占坑hook加载,也可以使用静态代理，静态代理就需要自定义classloader,记住这个加载模式就行，再多细节在评论回复吧<br>，资源处理就是assetmanager的创建，然后资源冲突处理，简单的可以构建多个assetmanager就没有冲突问题，应为隔离了，如果使用一个那么<br>打包aapt定制一下就行,还有很多细节，在评论回复吧，说不完了。</p>
</blockquote>
<h2 id="内存优化-，如何避免oom"><a href="#内存优化-，如何避免oom" class="headerlink" title="内存优化 ，如何避免oom"></a>内存优化 ，如何避免oom</h2><blockquote>
<p>内存优化太多要说的了，有套路的回答，基本就是避免跟gc配合好工作，比如：尽量复用对象，处理无用对象，避免内存泄漏，压缩对象等等<br>，尽量将大对象特殊处理，比如bitmap占用内存较多，可以jni层与java层配合一起，大小压缩，质量压缩，imsimplesize的大小定义，规范等等，程序中有内存管理模块，避免内存压力大的时候<br>，能够释放内存，避免oom发生的几率，还有很多方面，在评论回复吧。</p>
</blockquote>
<h2 id="内存泄漏如何处理及如何排查"><a href="#内存泄漏如何处理及如何排查" class="headerlink" title="内存泄漏如何处理及如何排查"></a>内存泄漏如何处理及如何排查</h2><blockquote>
<p>内存泄漏最大的问题就是无用对象常驻内存，导致内存压力很大，最后可能导致oom发生。尽量将对象生命周期可以在控制的能力之内，具体的在回复说吧，也很多场景,比如：context 除了特殊情况用activity，其他我们没理由不用application。排查导出堆空间，然后mat分析，程序里面<br>用leackcanary定位。</p>
</blockquote>
<h2 id="handler问题"><a href="#handler问题" class="headerlink" title="handler问题"></a>handler问题</h2><blockquote>
<p>这个需要回复两个基本的，首先handler的创建需要loop，loop怎么创建的，同时这个里面怎么保证loop线程安全的，还有就是消息如何分发的，也就是消息发送到接受的流程，<br>还有callback对消息处理的影响，这些足够了，还可以说可以跨进程，这样就更棒了，具体的在回复说，太多了。</p>
</blockquote>
<h2 id="图片加载用的什么以及原理"><a href="#图片加载用的什么以及原理" class="headerlink" title="图片加载用的什么以及原理"></a>图片加载用的什么以及原理</h2><blockquote>
<p> 图片加载的太多了，说个自己非常熟悉的就行，不要给自己挖坑，都懂的，比如你熟悉uil，那就说具体的加载过程，<br>套路都差不多，都是创建图片task，先从缓存取出来，取不到就去网络下载，下载完之后，同时缓存起来，这里需要说下，线程池，队列，pause，resume的具体细节，比如跟view，activity的绑定关系。回复具体说，也很多</p>
</blockquote>
<h2 id="从一堆数据里怎么查找最大的n个数"><a href="#从一堆数据里怎么查找最大的n个数" class="headerlink" title="从一堆数据里怎么查找最大的n个数"></a>从一堆数据里怎么查找最大的n个数</h2><blockquote>
<p>这个用归并排序，或者直接快排，没啥还说的。不会的自己google看算法，算法后面我会写出来到文章里面。</p>
</blockquote>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote>
<p>基本思想挖坑，分而治之，按照这个思路看代码就行</p>
</blockquote>
<h2 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h2><blockquote>
<p>这个kmp算法，或者最基本的吧，不考虑时间，空间复杂度的条件下，但是不要说这个，太low了点。其实这些算法背下来就好，不是业务场景的，意义不大，但是必须要会,不然吃亏了</p>
</blockquote>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><blockquote>
<p>其实架构没有固定模式，能够说出自己对架构的理解就很好，比如mvp，不同人对这个理解不一样，最好的，够用的，最适合业务的才是好架构，这个也很多要说，评论说吧。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;介绍自己负责的部分，如何实现的。&lt;/li&gt;
&lt;li&gt;自定义view viewGroup&lt;/li&gt;
&lt;li&gt;activity的启动流程&lt;/li&gt;
&lt;li&gt;事件传递及滑动冲突的处理&lt;/li&gt;
&lt;li&gt;插件化（activity如何加载及资源处理&lt;/li&gt;
&lt;li&gt;内存优化 ，如何避免oom&lt;/li&gt;
&lt;li&gt;内存泄漏如何处理及如何排查&lt;/li&gt;
&lt;li&gt;handler问题&lt;/li&gt;
&lt;li&gt;图片加载用的什么以及原理&lt;/li&gt;
&lt;li&gt;从一堆数据里怎么查找最大的n个数&lt;/li&gt;
&lt;li&gt;快速排序&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串匹配&lt;/p&gt;
    
    </summary>
    
      <category term="interview" scheme="http://jackwaylong.github.io/categories/interview/"/>
    
    
      <category term="alog" scheme="http://jackwaylong.github.io/tags/alog/"/>
    
      <category term="ams" scheme="http://jackwaylong.github.io/tags/ams/"/>
    
  </entry>
  
  <entry>
    <title>打破标准的第一个OC程序</title>
    <link href="http://jackwaylong.github.io/2016/12/06/ios-oc-1/"/>
    <id>http://jackwaylong.github.io/2016/12/06/ios-oc-1/</id>
    <published>2016-12-06T13:36:07.000Z</published>
    <updated>2016-12-06T13:45:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>平时我们写程序第一个程序都是<em>hello world</em>,这次开始就不用老套路了，用字符串的基本用法开始，我认为标准的hello world 其实就是一个字符串,但是我们从程序的角度看，就是一个空虚的字符串，不能让我们想到更多，我想如果能否说一些字符串的基本操作可能更有意思，一方面是基础语法，另一方面也理解了<code>oc</code>字符串对象与<code>java</code>的不同点。</p>
</blockquote>
<a id="more"></a>
<h1 id="NSString"><a href="#NSString" class="headerlink" title="NSString"></a>NSString</h1><blockquote>
<p>oc里面对象都是以NS开头的，记住就行，要想知道为什么的去<a href="http://www.google.com" target="_blank" rel="external">google</a>吧! oc里面的字符串与java最大的不同就是，java里面是个引用，而oc里面是个指针，跟c/c++ 很类似。</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#<span class="keyword">import</span> &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        <span class="comment">// insert code here...</span></div><div class="line">        <span class="comment">// 字符串</span></div><div class="line">        <span class="type">NSString</span>* str = @<span class="string">"first oc"</span>;</div><div class="line">        <span class="type">NSUInteger</span> len = str.length; <span class="comment">// 获取字符串的长度，跟java差不多，只是java是一个方法，而oc是一个属性</span></div><div class="line">        <span class="type">BOOL</span> contain = [str containsString:@<span class="string">"bc"</span>]; <span class="comment">// 判断子串</span></div><div class="line">        <span class="type">NSLog</span>(@<span class="string">"str:%@ contain %@ %hhd"</span>,str,@<span class="string">"bc"</span>,contain); <span class="comment">// 格式化打印,跟c/c++ printf长的很像，跟java的System.out.println 差不多</span></div><div class="line">        <span class="type">NSString</span>* result = [str stringByReplacingCharactersInRange:<span class="type">NSMakeRange</span>(<span class="number">0</span>, <span class="number">1</span>) withString:@<span class="string">"b"</span>]; <span class="comment">// 字符串子串替换</span></div><div class="line">        <span class="type">NSString</span>* sub = [str substringFromIndex:<span class="number">3</span>]; <span class="comment">// 获取子串</span></div><div class="line">        <span class="type">NSLog</span>(@<span class="string">"%@ %lu %@ sub"</span>, str,len,sub);</div><div class="line">        <span class="type">NSLog</span>(@<span class="string">"result:%@"</span>,result);</div><div class="line">        <span class="keyword">for</span> (int i=<span class="number">0</span>; i&lt; len; ++i) &#123;<span class="comment">// 遍历字符串</span></div><div class="line">            <span class="type">NSLog</span>(@<span class="string">"c:%c"</span>,[str characterAtIndex:i]);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 静态方法 将字符数组转换成os string</span></div><div class="line">        <span class="type">NSString</span>* chars = [<span class="type">NSString</span> stringWithCString:<span class="string">"oc"</span> encoding:<span class="type">NSUTF8StringEncoding</span>];</div><div class="line">        <span class="type">NSLog</span>(@<span class="string">"chars %@"</span>,chars);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>oc 里面导入基础库跟java一样，只是java导入的是类或者静态方法，而oc导入的是头文件，也是是实现的声明，因为oc不开源，我们只能通过看到头文件的具体声明。其中oc里面Foundation.h 这个是基础更能核心库，后面还有uikit等核心库。<br>第一个程序看起来很简单，其实里面很多语法细节，后面慢慢来讲吧，往往简单的东西背后都是复杂。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;平时我们写程序第一个程序都是&lt;em&gt;hello world&lt;/em&gt;,这次开始就不用老套路了，用字符串的基本用法开始，我认为标准的hello world 其实就是一个字符串,但是我们从程序的角度看，就是一个空虚的字符串，不能让我们想到更多，我想如果能否说一些字符串的基本操作可能更有意思，一方面是基础语法，另一方面也理解了&lt;code&gt;oc&lt;/code&gt;字符串对象与&lt;code&gt;java&lt;/code&gt;的不同点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="ios" scheme="http://jackwaylong.github.io/categories/ios/"/>
    
    
      <category term="oc" scheme="http://jackwaylong.github.io/tags/oc/"/>
    
      <category term="NSString" scheme="http://jackwaylong.github.io/tags/NSString/"/>
    
  </entry>
  
  <entry>
    <title>wait和sleep 深度分析</title>
    <link href="http://jackwaylong.github.io/2016/12/05/wait-sleep/"/>
    <id>http://jackwaylong.github.io/2016/12/05/wait-sleep/</id>
    <published>2016-12-05T06:08:43.000Z</published>
    <updated>2016-12-06T06:00:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>首先我们需要明白wait与sleep的区别，区别大致有下面几个方面:</p>
</blockquote>
<ol>
<li>wait是Object中的方法,sleep是Thread中的方法</li>
<li>wait必须在同步代码块中调用，也就是说必须首先获得监视器锁，然后才能调用,sleep可以在任何可能的地方调用</li>
<li>wait释放锁,sleep不释放锁</li>
<li>wait尽可能的少消耗cpu资源,sleep消耗更多的cpu资源</li>
</ol>
<a id="more"></a>
<h2 id="下面分析一种wait协助的场景，如果换成sleep可能导致死锁"><a href="#下面分析一种wait协助的场景，如果换成sleep可能导致死锁" class="headerlink" title="下面分析一种wait协助的场景，如果换成sleep可能导致死锁"></a>下面分析一种wait协助的场景，如果换成sleep可能导致死锁</h2><blockquote>
<p>wait协助代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TestThread.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Object&gt; MAP = <span class="keyword">new</span> WeakHashMap&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object WAIT = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        Object object;</div><div class="line">        <span class="keyword">synchronized</span> (MAP) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"tid:"</span> + Thread.currentThread().getId());</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                object = MAP.get(key);</div><div class="line">                <span class="keyword">if</span> (object == WAIT) &#123;<span class="comment">// 线程等待</span></div><div class="line">                    Log.e(TAG, <span class="string">"wait......"</span>);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        MAP.wait();</div><div class="line">                        <span class="comment">//Thread.sleep(1000);</span></div><div class="line">                        Log.e(TAG,<span class="string">"wake...."</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123; <span class="comment">// hit</span></div><div class="line">                    Log.e(TAG, <span class="string">"hit:"</span> + object);</div><div class="line">                    <span class="keyword">return</span> object;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    MAP.put(key, WAIT); <span class="comment">// 存放wait对象</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        Log.e(TAG, <span class="string">"generate...."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">synchronized</span> (MAP) &#123;</div><div class="line">            object = UUID.randomUUID().toString();</div><div class="line">            Log.e(TAG, object.toString());</div><div class="line">            <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</div><div class="line">                MAP.put(key, object); <span class="comment">// 存放真正数据</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                MAP.remove(key); <span class="comment">// 如果获取数据失败,需要删除对应的key,让等待对象自己获取</span></div><div class="line">            &#125;</div><div class="line">            MAP.notifyAll(); <span class="comment">// 通知在MAP上的所有等待对象</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> object;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>上面代码可以正常协助,如果将<code>MAP.wait()</code> 替换成 <code>Thread.sleep(1000)</code> 就很可能导致死锁</p>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<p>通过上面代码我们在写并发代码的时候，一定要理解场景，不然真的很危险.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先我们需要明白wait与sleep的区别，区别大致有下面几个方面:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;wait是Object中的方法,sleep是Thread中的方法&lt;/li&gt;
&lt;li&gt;wait必须在同步代码块中调用，也就是说必须首先获得监视器锁，然后才能调用,sleep可以在任何可能的地方调用&lt;/li&gt;
&lt;li&gt;wait释放锁,sleep不释放锁&lt;/li&gt;
&lt;li&gt;wait尽可能的少消耗cpu资源,sleep消耗更多的cpu资源&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="java" scheme="http://jackwaylong.github.io/categories/java/"/>
    
    
      <category term="wait" scheme="http://jackwaylong.github.io/tags/wait/"/>
    
      <category term="sleep" scheme="http://jackwaylong.github.io/tags/sleep/"/>
    
  </entry>
  
  <entry>
    <title>shareUID</title>
    <link href="http://jackwaylong.github.io/2016/12/03/shareUID/"/>
    <id>http://jackwaylong.github.io/2016/12/03/shareUID/</id>
    <published>2016-12-03T05:45:14.000Z</published>
    <updated>2016-12-06T06:01:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>shareUID是提供已经安装app之间的数据访问的通道，我们最常见的场景就是同一个公司不同的app安装在同一手机上，在某些时候可能需要数据，资源，代码共享，但是实现该目的也是有一定限制的，首先保证app之间的签名一致，同时shareUID值相等，才能完全无障碍访问所有资源，不然只能访问部分资源，代码，sharedPreferences等资源是没法访问到的，即使访问到的也是非安全的。<br><a id="more"></a></p>
<h2 id="shareuid常见数据共享的方式有"><a href="#shareuid常见数据共享的方式有" class="headerlink" title="shareuid常见数据共享的方式有"></a>shareuid常见数据共享的方式有</h2><ol>
<li>用户数据共享</li>
<li>资源共享</li>
<li>代码共享</li>
</ol>
<h2 id="用户数据共享"><a href="#用户数据共享" class="headerlink" title="用户数据共享"></a>用户数据共享</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String filename = <span class="string">"share"</span>;</div><div class="line">       String key = <span class="string">"share"</span>;</div><div class="line">       String value = ShareUtils.getStringValue(<span class="keyword">this</span>, targetPackagename, filename, key, <span class="string">""</span>);</div><div class="line">       Log.e(TAG, <span class="string">"value:"</span> + value);</div></pre></td></tr></table></figure>
<h2 id="资源共享"><a href="#资源共享" class="headerlink" title="资源共享"></a>资源共享</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String app_name = ShareUtils.getResString(<span class="keyword">this</span>, targetPackagename, <span class="string">"app_name"</span>);</div><div class="line">       Log.e(TAG, <span class="string">"app_name:"</span> + app_name);</div></pre></td></tr></table></figure>
<h2 id="代码共享"><a href="#代码共享" class="headerlink" title="代码共享"></a>代码共享</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">String cName = <span class="string">"com.longway.share.Print"</span>;</div><div class="line">        Class&lt;?&gt; clz = ShareUtils.loadClass(<span class="keyword">this</span>, targetPackagename, cName);</div><div class="line">        <span class="keyword">if</span> (clz != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Object o = clz.newInstance();</div><div class="line">                Method method = clz.getDeclaredMethod(<span class="string">"print"</span>, String.class);</div><div class="line">                <span class="keyword">if</span> (!method.isAccessible()) &#123;</div><div class="line">                    method.setAccessible(<span class="keyword">true</span>);</div><div class="line">                &#125;</div><div class="line">                method.invoke(o, TAG);</div><div class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>以上只是简单的提供数据访问的几种方式面，比如数据库，assets等等都是可以访问的，但是访问的时候需要考虑数据安全。</p>
</blockquote>
<h2 id="访问数据简单代码"><a href="#访问数据简单代码" class="headerlink" title="访问数据简单代码"></a>访问数据简单代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShareUtils</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ShareUtils</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStringValue</span><span class="params">(Context context, String targetPackname, String filename, String key, String dv)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Context ctx = context.createPackageContext(targetPackname, Context.CONTEXT_IGNORE_SECURITY);</div><div class="line">            SharedPreferences sharedPreferences = ctx.getSharedPreferences(filename, Context.MODE_PRIVATE);</div><div class="line">            <span class="keyword">return</span> sharedPreferences.getString(key, dv);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dv;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getResString</span><span class="params">(Context context, String targetPackname, String resName, Object... args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Context ctx = context.createPackageContext(targetPackname, Context.CONTEXT_IGNORE_SECURITY);</div><div class="line">            Resources resources = ctx.getResources();</div><div class="line">            <span class="keyword">int</span> id = resources.getIdentifier(resName, <span class="string">"string"</span>, targetPackname);</div><div class="line">            <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> resources.getString(id, args);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAppname</span><span class="params">(Context context, String targetPackname,<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Context ctx = context.createPackageContext(targetPackname, Context.CONTEXT_IGNORE_SECURITY);</div><div class="line">            Resources resources = ctx.getResources();</div><div class="line">            <span class="keyword">return</span> resources.getString(id);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(Context context, String targetPackagename, String name) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Context ctx = context.createPackageContext(targetPackagename,Context.CONTEXT_IGNORE_SECURITY|Context.CONTEXT_INCLUDE_CODE);</div><div class="line">            ClassLoader classLoader = ctx.getClassLoader();</div><div class="line">            Log.e(<span class="string">"loader"</span>, (context.getClassLoader() == classLoader) + <span class="string">""</span>);</div><div class="line">            Log.e(<span class="string">"pathClassLoader"</span>, (classLoader <span class="keyword">instanceof</span> PathClassLoader) + <span class="string">""</span>);</div><div class="line">            <span class="keyword">return</span> classLoader.loadClass(name);</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<p>shareuid的前提是app已经安装到了设备中，不然是访问不了的，如果是没安装的访问，就只能用插件化的方式去加载，然后去访问了。根据自己的需求，选择对应的技术实现就好了。</p>
</blockquote>
<p><a href="https://github.com/jackwaylong/shareuid" target="_blank" rel="external">查看源码实例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shareUID是提供已经安装app之间的数据访问的通道，我们最常见的场景就是同一个公司不同的app安装在同一手机上，在某些时候可能需要数据，资源，代码共享，但是实现该目的也是有一定限制的，首先保证app之间的签名一致，同时shareUID值相等，才能完全无障碍访问所有资源，不然只能访问部分资源，代码，sharedPreferences等资源是没法访问到的，即使访问到的也是非安全的。&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://jackwaylong.github.io/categories/android/"/>
    
    
      <category term="shareUID" scheme="http://jackwaylong.github.io/tags/shareUID/"/>
    
      <category term="Context" scheme="http://jackwaylong.github.io/tags/Context/"/>
    
  </entry>
  
  <entry>
    <title>SharedPreferences真的安全吗?</title>
    <link href="http://jackwaylong.github.io/2016/12/03/safesharepreferences/"/>
    <id>http://jackwaylong.github.io/2016/12/03/safesharepreferences/</id>
    <published>2016-12-02T19:04:51.000Z</published>
    <updated>2016-12-06T06:01:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>SharedPreferences是单进程线程安全,Android系统进程之间的内存是隔离的,<br>这样就导致了进程之间如果访问同一个数据文件,进行数据共享通信的时候,可能会<br>出现下面几种异常:<br><a id="more"></a></p>
<ol>
<li>数据不一致</li>
<li>数据异常</li>
<li>文件异常</li>
</ol>
<h2 id="进程之间数据共享"><a href="#进程之间数据共享" class="headerlink" title="进程之间数据共享"></a>进程之间数据共享</h2><p>要想实现进程中之间安全通信,我们需要将不同进程之间对数据的访问映射到同一个数据<br>进程,然后通过这个进程实现线程安全实现数据通信,我们可以将这个进程理解为代理进程<br>,Android系统已经提供给我们ContentProvider进程,我们通过这个就可以实现安全通信</p>
<h2 id="进程之间数据共享图例"><a href="#进程之间数据共享图例" class="headerlink" title="进程之间数据共享图例"></a>进程之间数据共享图例</h2><p><img src="https://www.processon.com/chart_image/5826bc16e4b00c4fc87d4b8c.png"></p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><ol>
<li><p>注册进程之间数据观察者(非必须)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> SharePreferencesObserver mSharePreferencesObserver = <span class="keyword">new</span> SharePreferencesObserver() &#123;</div><div class="line">       	<span class="meta">@Override</span></div><div class="line">       	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSharePreferencesChange</span><span class="params">(SharePreferencesObservable sharePreferencesObservable, String key)</span> </span>&#123;</div><div class="line">           <span class="comment">//Log.e(TAG, "key:" + key + ",value:" + mSharePreferencesManager.getBoolean(key, 		false));</span></div><div class="line">           Log.e(TAG, <span class="string">"map result &lt;&lt;"</span> + mSharePreferencesManager.getAll().toString());</div><div class="line"></div><div class="line">       &#125;</div><div class="line">   &#125;;</div><div class="line">mSharePreferencesManager.registerOnSharePreferencesObserver(mSharePreferencesObserver);</div></pre></td></tr></table></figure>
</li>
<li><p>数据访问</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Log.e(TAG, mSharePreferencesManager.putBoolean(<span class="string">"isExpire"</span>, <span class="keyword">true</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.contains(<span class="string">"isExpire"</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getBoolean(<span class="string">"isExpire"</span>, <span class="keyword">false</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.putInt(<span class="string">"int"</span>, <span class="number">3</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getInt(<span class="string">"int"</span>, -<span class="number">1</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.putFloat(<span class="string">"float"</span>, <span class="number">3.9f</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getFloat(<span class="string">"float"</span>, <span class="number">0.0f</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.putLong(<span class="string">"long"</span>, <span class="number">40L</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getLong(<span class="string">"long"</span>, <span class="number">0L</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.putString(<span class="string">"string"</span>, <span class="string">"小马哥"</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getString(<span class="string">"string"</span>, <span class="string">"马云"</span>));</div><div class="line">Log.e(TAG, mSharePreferencesManager.remove(<span class="string">"string"</span>) + <span class="string">""</span>);</div><div class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">set.add(<span class="string">"hello1"</span>);</div><div class="line">set.add(<span class="string">"world1"</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.putStringSet(<span class="string">"set"</span>, set) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, mSharePreferencesManager.getStringSet(<span class="string">"set"</span>, <span class="keyword">null</span>) + <span class="string">""</span>);</div><div class="line">Log.e(TAG, <span class="string">"map result &lt;&lt;"</span> + mSharePreferencesManager.getAll().toString());</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意上面的步骤在任意进程都一样,并且数据都是安全共享的 </p>
</blockquote>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用过程中有任何问题反馈至<a href="https://github.com/jackwaylong/SafeSharedPreferences/issues" target="_blank" rel="external">feedback</a></p>
<h2 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h2><blockquote>
<p>任何疑问?</p>
</blockquote>
<ol>
<li>源码学习<a href="https://github.com/jackwaylong/SafeSharedPreferences/tree/master/safeshareperferences/src/main/java/com/longway/safeshareperferences" target="_blank" rel="external">safeSharedPreferences</a></li>
</ol>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><blockquote>
<p>clone项目发送pull request</p>
</blockquote>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>SafeSharedPreferences is under the Apache license. See the <a href="https://github.com/jackwaylong/SafeSharedPreferences/blob/master/LICENSE" target="_blank" rel="external">LICENSE</a> file for details.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SharedPreferences是单进程线程安全,Android系统进程之间的内存是隔离的,&lt;br&gt;这样就导致了进程之间如果访问同一个数据文件,进行数据共享通信的时候,可能会&lt;br&gt;出现下面几种异常:&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://jackwaylong.github.io/categories/android/"/>
    
    
      <category term="sharepreferences" scheme="http://jackwaylong.github.io/tags/sharepreferences/"/>
    
      <category term="contentprovider" scheme="http://jackwaylong.github.io/tags/contentprovider/"/>
    
      <category term="martixcursor" scheme="http://jackwaylong.github.io/tags/martixcursor/"/>
    
  </entry>
  
  <entry>
    <title>单例模式真的很简单吗？</title>
    <link href="http://jackwaylong.github.io/2016/12/03/single/"/>
    <id>http://jackwaylong.github.io/2016/12/03/single/</id>
    <published>2016-12-02T18:30:04.000Z</published>
    <updated>2016-12-06T05:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>单例模式真的不简单，但是单例模式也是我们开发中常用的一种设计模式,然而不管Github上开源的代码，还是很多开发同学写的单例模式，百花齐放，百家争鸣，各种版本，这篇文章我想跟大家聊聊我心中的单例模式，同时我会给出我心目中的单例模式的各种版本，同时会给出不同版本的优缺点，以及我们最后应该选用哪个版本才是最为安全，优雅，同时性能也是比较好的，最后我想说，安全，性能是一个折中的考虑。</p>
</blockquote>
<a id="more"></a>
<h2 id="单例对象创建的一般步骤"><a href="#单例对象创建的一般步骤" class="headerlink" title="单例对象创建的一般步骤"></a>单例对象创建的一般步骤</h2><ol>
<li>构造函数<code>private</code></li>
<li>定义<code>static</code>成员变量</li>
<li>提供<code>static getInstance</code> 方法获取对象</li>
</ol>
<h2 id="SingletonV1"><a href="#SingletonV1" class="headerlink" title="SingletonV1"></a>SingletonV1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV1</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonV1 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV1</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            sInstance = <span class="keyword">new</span> SingletonV1();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本是最简单的方式创建单例对象,但是这个版本只适合单线程场景下，在并发条件下，不能保证对象为唯一性，如果有同学也这么实现的，赶紧反思一下。</p>
<h2 id="SingletonV2"><a href="#SingletonV2" class="headerlink" title="SingletonV2"></a>SingletonV2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonV2 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV2</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonV2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            sInstance = <span class="keyword">new</span> SingletonV2();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本跟第一个版本的区别就是多了个<code>synchronized</code>关键字，暂且我们这么理解，这个关键字是保证保证线程安全的，这样一来，我们保证了单例，确实没错，但是这个版本并不是我想要的，为什么了？因为这个锁是方法锁，意味着性能损失较大，至于为什么损失较大，这里就不展开讲了，有疑问的同学可以评论里，向我提问。</p>
<h2 id="SingletonV3"><a href="#SingletonV3" class="headerlink" title="SingletonV3"></a>SingletonV3</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV3</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonV3 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV3</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (SingletonV3.class) &#123;</div><div class="line">            <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                sInstance = <span class="keyword">new</span> SingletonV3();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本看上去是代码段局部锁，但是我们仔细一看，其实跟第二个版本一模一样，没有本质区别，所以这个版本也不是我们想要的。</p>
<h2 id="SingletonV4"><a href="#SingletonV4" class="headerlink" title="SingletonV4"></a>SingletonV4</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV4</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonV4 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV4</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (SingletonV4.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                    sInstance = <span class="keyword">new</span> SingletonV4();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本最大的改进是在第三个版本的基础上实现了双层检测，在某种层度上，性能有所提升，但是是不是就没有安全问题了，不是的，这个版本也不是我们想要的，因为在指令重排的情况下，会出错，在这里也不打算展开讲为什么会出现这中诡异的现象，有想知道原因的，可以在评论里，向我提问。</p>
<h2 id="SingletonV5"><a href="#SingletonV5" class="headerlink" title="SingletonV5"></a>SingletonV5</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV5</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonV5 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV5</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (SingletonV5.class) &#123;</div><div class="line">                sInstance = <span class="keyword">new</span> SingletonV5();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本有在并发的环境下很难保证单例，也有可能报错。</p>
<h2 id="SingletonV6"><a href="#SingletonV6" class="headerlink" title="SingletonV6"></a>SingletonV6</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV6</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonV6 sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV6</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getInstance();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (SingletonV6.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                    sInstance = <span class="keyword">new</span> SingletonV6();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本算比较完美了，在某种条件下，保证了单例，同时性能也有了一定的保证，同时反序列化也保证了单例，但是这种是不是也就没问题了，错了，这个版本在jdk1.5之后才能算完美，以前版本还是有问题的, 这里不展开讲原因，有疑问的同学在下面的评论，可以向我提问。</p>
<h2 id="SingletonV7"><a href="#SingletonV7" class="headerlink" title="SingletonV7"></a>SingletonV7</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  SingletonV7 &#123;</div><div class="line">    INSTANCE</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本是上一个版本的增强版，同时也是最优雅的版本，也是最为安全的版本，性能也是较好的版本，同时基于自身特点保证了序列化，反序列化的安全，同时也是目前最为推荐使用的单例版本，这里不展开讲原因，有兴趣的同学，可以在下面的评论，向我提问。</p>
<h2 id="SingletonV8"><a href="#SingletonV8" class="headerlink" title="SingletonV8"></a>SingletonV8</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV8</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV8</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonV8 INSTANCE = <span class="keyword">new</span> SingletonV8();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV8 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本也是虚拟机能够保证安全的版本，但是需要额外的内部类提供保证，空间复杂度比上面版本大，综合考虑还是考虑枚举版本</p>
<h2 id="SingletonV9"><a href="#SingletonV9" class="headerlink" title="SingletonV9"></a>SingletonV9</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV9</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonV9 INSTANCE = <span class="keyword">new</span> SingletonV9();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV9</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV9 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本也是安全的，但是有个缺陷就是这个类只要其中有个静态成员加载，那么就会创建对象，也是我们经常说的饿汉式模式，上面的版本都是懒汉式模式，对于这两种模式不太了解的，可以在下面的评论，向我提问。</p>
<h2 id="SingletonV10"><a href="#SingletonV10" class="headerlink" title="SingletonV10"></a>SingletonV10</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonV10</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonV10 sInstance;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicBoolean FLAG = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonV10</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonV10 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (; ; ) &#123;</div><div class="line">            <span class="keyword">if</span> (FLAG.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</div><div class="line">                sInstance = <span class="keyword">new</span> SingletonV10();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (sInstance != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个版本是用CAS的无阻塞，乐观锁的特性实现</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol>
<li>对象创建的不同方式，以及不同点</li>
<li>对象的创建过程</li>
<li>classloader的namespace</li>
<li>虚拟机实例的个数对对象的影响</li>
<li>继承对对象创建的影响</li>
<li>对象代码复用</li>
<li>对象锁，类锁，全局锁的区别</li>
<li>锁中的坑</li>
</ol>
<blockquote>
<p>这篇由于主要由浅入深的讲解单例，上面的扩展就不展开讲了，如果有感兴趣的同学，可以在评论里，向我提问，我会详细解答的，后面的文章我也会由浅入深的讲解。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看似很简单一种设计模式，其实我们深入思考一下，就没那么简单了，中间有很多技术点，有很多细节需要我们去挖掘，思考，最后推荐SingletonV7版本，注意这个只是保证了对象创建安全，对象成员的安全，还需要我们自己去保证。希望阅读过这篇文章的同学，再也不要写不安全的单例对象代码了，代码改进的一小步，程序稳定，可靠的一大步。</p>
<h2 id="可能的疑问"><a href="#可能的疑问" class="headerlink" title="可能的疑问"></a>可能的疑问</h2><p>有的同学可能会在想，客户端平台不是不建议enum吗？确实没错，那是很早以前android官网也不建议使用，但是现在你去看官网还能看到那句话吗？google已经去掉了，至于为什么去掉了，我个人认为，有几种可能的原因，第一个是目前机器的配置，现在的cpu，内存等配置跟以前都不是在一个级别上，第二个就是软件层运行时对代码优化。另外还有<code>JakeWharton</code>大神都不考虑这个了，我们还有什么理由考虑这些了，其实真的没必要考虑这个了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;单例模式真的不简单，但是单例模式也是我们开发中常用的一种设计模式,然而不管Github上开源的代码，还是很多开发同学写的单例模式，百花齐放，百家争鸣，各种版本，这篇文章我想跟大家聊聊我心中的单例模式，同时我会给出我心目中的单例模式的各种版本，同时会给出不同版本的优缺点，以及我们最后应该选用哪个版本才是最为安全，优雅，同时性能也是比较好的，最后我想说，安全，性能是一个折中的考虑。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://jackwaylong.github.io/categories/java/"/>
    
    
      <category term="single" scheme="http://jackwaylong.github.io/tags/single/"/>
    
      <category term="volatile" scheme="http://jackwaylong.github.io/tags/volatile/"/>
    
      <category term="synchronized" scheme="http://jackwaylong.github.io/tags/synchronized/"/>
    
      <category term="enum" scheme="http://jackwaylong.github.io/tags/enum/"/>
    
  </entry>
  
  <entry>
    <title>揭开Gradle的神秘面纱</title>
    <link href="http://jackwaylong.github.io/2016/11/29/gradle/"/>
    <id>http://jackwaylong.github.io/2016/11/29/gradle/</id>
    <published>2016-11-28T16:32:01.000Z</published>
    <updated>2016-11-28T17:00:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.processon.com/chart_image/583c622fe4b0e742e43f7055.png"></p>
<blockquote>
<p>gradle前言</p>
<p>在解开gradle神秘面纱前,我想说一下gradle是如此的强大,在我看来在目前互联网爆炸的时代,构建工具也不少,比如以前我接触的Ant,maven等,在这里只想说我接触gradle并且去研究之后,从此我就爱上了gradle的强大，灵活，高效，并且可以让我们android开发者上手快，这是因为我们android开发的主要语言是java，java是基于虚拟的一种语言，而gradle的最终产物也是java子节码，所以我认为我们写gadle代码就是写业务代码，当然也有不同，那就是dsl特性，后面会慢慢展开讲解，让大家真正的去理解gradle的强大，并且能够真正的在as的强大能力下，能够将gardle真正运用好，提高开发效率。这里我并不是吐槽其他构件工具不好,没有最好，只有更好，更适合，从客户端构件角度来看，我个人觉得gradle非常适合，下面将解开gradle一层一层的面纱。<br><a id="more"></a><br>gradle大纲</p>
<ul>
<li>gradle是什么</li>
<li>gradle的好处</li>
<li>gradle内部构建原理</li>
<li>如何使用gradle提高工作效率</li>
<li>gradle工程构建流</li>
<li>gradle实战</li>
</ul>
</blockquote>
<h2 id="gradle是什么"><a href="#gradle是什么" class="headerlink" title="gradle是什么"></a>gradle是什么</h2><blockquote>
<p>gradle其实是一套构件工具机,使用groovy语言的DSL特性以及java的灵活特性进行构建,还有很多特性大家可以去<a href="https://gradle.org/" target="_blank" rel="external">gradle.org</a>官网进行深入的学习或者<code>google</code>找相关资料了解</p>
</blockquote>
<h2 id="gradle的好处"><a href="#gradle的好处" class="headerlink" title="gradle的好处"></a>gradle的好处</h2><blockquote>
<p>其实我们学习一门技术肯定是有对应的好处我们才去学习对吧,不管好处多大,起码能帮助我们工作,毕竟我们都是上班的码农,我个人认为gradle最大的好处就是能够让我们更关注我们最关注的，不需要关注那些与我们关系不大的，毕竟我们不需要关注，然而这样就让我们失去了很多的深入学习的机会，导致我们养成了只要能用就行的思维，在我看来懒惰使人进步，为了想懒惰我一定要去思考如何自动化的去解决问题，gradle满足了我的目标，非常强大。</p>
</blockquote>
<h2 id="gradle的内部构建原理"><a href="#gradle的内部构建原理" class="headerlink" title="gradle的内部构建原理"></a>gradle的内部构建原理</h2><blockquote>
<p>在讲解内部构件原理之前，我想讲解下我是如何去理解gradle这玩意的，gradle按照一般写业务代码的思维还是有点区别的，毕竟领域不同，gradle写的是脚本，却运行的java子节码，所以我这么思考，我用写java运行时的思维去写gradle脚本，然后学习gradle dsl特性，这样以来，理解这个构建工具就非常流畅了，不然我是理解不好的，每个人都有自己的理解方式，找自己最好的理解方式就好。gradle构建内部运行机制是这样的，首先初始化构建引擎，然后将脚本转换成java代码,然后就是我们最熟悉的构建过程了,将java代码转换成子节码,然后交给虚拟机加载执行</p>
</blockquote>
<h2 id="如何使用gradle提高工作效率"><a href="#如何使用gradle提高工作效率" class="headerlink" title="如何使用gradle提高工作效率"></a>如何使用gradle提高工作效率</h2><blockquote>
<p>我个人认为构建工具毕竟是一种工具特性,那么就一套完善的高效特性让我去挖掘,我目前挖掘的有利用as的工程特性，结合gradle的强大构建特性，自动化分析文件，自动化打包，模版构建，后面不断有新的挖掘，我相信只要是工具类的东西然后结合我们的技术手段那么肯定会提高我们的工作效率，可能需要手动10分钟的事情，而用gradle处理只要1分钟，甚至更短，错误几率也大大减低，减除人工干预，毕竟现在是人工智能时代，感觉我们会被计算机征服，真可怕，我们唯一能做的就是提升自己。</p>
</blockquote>
<h2 id="gradle工程构建流"><a href="#gradle工程构建流" class="headerlink" title="gradle工程构建流"></a>gradle工程构建流</h2><blockquote>
<p>as gradle工程构建流图示</p>
</blockquote>
<p><img src="https://www.processon.com/chart_image/582570bce4b0fa6ffba35f85.png"></p>
<p><img src="https://www.processon.com/chart_image/58257525e4b00c4fc871d544.png"></p>
<h2 id="gradle实战"><a href="#gradle实战" class="headerlink" title="gradle实战"></a>gradle实战</h2><blockquote>
<p>构建脚本集</p>
<ol>
<li><a href="">settings.gradle</a></li>
<li><a href="">root build.gradle</a></li>
<li><a href="">init.gradle</a></li>
<li><a href="">utils.gradle</a></li>
<li><a href="">tasks.gradle</a></li>
<li><a href="">submodle build.gradle</a></li>
<li><a href="">common.properties</a></li>
<li><a href="">template/project.properties</a></li>
<li><a href="">publish.bat/publish.sh</a></li>
<li><a href="">properties</a></li>
</ol>
</blockquote>
<h2 id="gradle插件开发"><a href="#gradle插件开发" class="headerlink" title="gradle插件开发"></a>gradle插件开发</h2><blockquote>
<p>插件开发基本流程</p>
<ol>
<li>插件工程一般结构</li>
<li>插件开发语言(java,gradle,groovy等等)</li>
<li>插件打包</li>
<li>插件部署</li>
<li>插件访问</li>
</ol>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>到此gradle基本构建流已经说完了,这些只是构建的开始,后面我还会继续深入gradle在组件化开发中的作用以及强大支撑，只有明白了gradle的基本工作原理，我们才能更好的去灵活运用gradle来拆分我们的工程，很好的解耦我们的工程，目前比较的多的开发模式有组件化，插件化，我个人理解gradle就是开发模式的驱动者，学好gradle才是根本，才能很好的进行模式开发，gradle网上的指导资料很少，基本都是一些用法，没有分析原理的，对于技术者我强烈建议学习一门技术还是去对应的官网，这样不仅仅能系统的学习，并且还能更为深入的理解语言的本质。</p>
</blockquote>
<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><blockquote>
<p>工程构建一般是跨界的，也就是说可能会涉及到很多种技术的融合，我目前接触到的有python，groovy，bash，bat 等脚本语言，希望大家不要仅仅停留在android业务开发中，技术融合才能让自己强大，多学习不同技术提高自己的维度，深度，广度。</p>
</blockquote>
<h2 id="后续gradle学习计划"><a href="#后续gradle学习计划" class="headerlink" title="后续gradle学习计划"></a>后续gradle学习计划</h2><ol>
<li>继续深入gradle构建流</li>
<li>gradle源码分析</li>
<li>发现gradle中好玩的东西，灵活运用到实际项目中</li>
<li>基于gradle构建项目到产品输出闭环</li>
</ol>
<h2 id="gradle项目地址"><a href="#gradle项目地址" class="headerlink" title="gradle项目地址"></a>gradle项目地址</h2><ul>
<li><a href="https://github.com/jackwaylong/Gradle/archive/master.zip" target="_blank" rel="external">下载</a></li>
<li><a href="https://github.com/jackwaylong/gradle" target="_blank" rel="external">github查看</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.processon.com/chart_image/583c622fe4b0e742e43f7055.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gradle前言&lt;/p&gt;
&lt;p&gt;在解开gradle神秘面纱前,我想说一下gradle是如此的强大,在我看来在目前互联网爆炸的时代,构建工具也不少,比如以前我接触的Ant,maven等,在这里只想说我接触gradle并且去研究之后,从此我就爱上了gradle的强大，灵活，高效，并且可以让我们android开发者上手快，这是因为我们android开发的主要语言是java，java是基于虚拟的一种语言，而gradle的最终产物也是java子节码，所以我认为我们写gadle代码就是写业务代码，当然也有不同，那就是dsl特性，后面会慢慢展开讲解，让大家真正的去理解gradle的强大，并且能够真正的在as的强大能力下，能够将gardle真正运用好，提高开发效率。这里我并不是吐槽其他构件工具不好,没有最好，只有更好，更适合，从客户端构件角度来看，我个人觉得gradle非常适合，下面将解开gradle一层一层的面纱。&lt;br&gt;
    
    </summary>
    
      <category term="groovy" scheme="http://jackwaylong.github.io/categories/groovy/"/>
    
    
      <category term="gradle" scheme="http://jackwaylong.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>modularity</title>
    <link href="http://jackwaylong.github.io/2016/11/27/modularity/"/>
    <id>http://jackwaylong.github.io/2016/11/27/modularity/</id>
    <published>2016-11-27T08:50:54.000Z</published>
    <updated>2016-11-27T09:53:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>主题大纲</p>
<ol>
<li>什么是组件化</li>
<li>什么是插件化</li>
<li>为什么要组件化</li>
<li>如何组件化</li>
<li>组件化的基本模型</li>
<li>组件化开发中的问题</li>
<li>组件化测试</li>
<li>组件化组件编译</li>
<li>组件化打包</li>
<li>组件化开发闭环链接系统</li>
<li>Q&amp;A</li>
</ol>
</blockquote>
<a id="more"></a>
<h2 id="什么是组件化"><a href="#什么是组件化" class="headerlink" title="什么是组件化"></a>什么是组件化</h2><p>在了解组件化之前,我们首先回顾一下目前非组件化工程的基本结构,首先我想说大家最想说的是as编译太慢,编译让人蓝瘦香菇，并且谁者业务需求越来越多，代码越来越多，编译时间线性增加，有些同学可能会通过自己机器的配置对应的设置，as的编译配置文件，增量编译，但是这样的结果还不是很明显，一方面由于as对增量编译的支持力度，在这个过程中有代码缓存问题。我们通过clean去解决，这样会导致重新build，从而导致编译时间还是很长，编译就像as给予我们放松的时刻。面对上面的这些问题，我相信我们很多同学都思考过，拆分当个工程为多个工程，然后模块编译，模块测试，最后整合若干模块称为一个apk，没错，思路是对的，但是为什么这些理论很难得到实践了。这就是我们经常说的，理想很丰满，现实很骨感。当我们找到一个理论突破口的时候，就感觉很满足，就觉得就这样。我想说我们必须实践，熟话说，实践才是检验真理的唯一标准，我们需要思考，学习，实践，用理论去解决实际问题。我个人认为as与生俱来就是提供开发者模块化的ide，很多同学可能有疑问，为什么这么认为，我们开发时仅仅把as看作一个开发辅助工具，但是我们站在更高的角度去思考，其实as给我们不仅仅是一种工具，而是一种给予我们基于这个工具去能创造，创新开发模式的软件。明白了这些，那么组件化到底是什么了，我看目前网上关于组件化开发的文章，这说明也有很多在开发中实践的，我个人认为还是不够完善，或者说很多问题，很多坑。我对组件化的理解就是module化开发，module测试，module打包，module发包，module集成，module暴露，下面详细说这些具体怎么做。</p>
<h2 id="什么是插件化"><a href="#什么是插件化" class="headerlink" title="什么是插件化"></a>什么是插件化</h2><p>有的同学很能有很大的疑问，主题是组件化，为什么要了解什么是插件化，这里只是说明一下插件化与组件化的区别，让我们实践过程中能够分清开发界限，能够将组件化做的更好。插件化是很多的开发模式，我们明白一点就可以了，插件化是单独的apk，jar，zip，dex，资源，so等。将这些进行动态加载，然而组件化本质还是一个主apk。不管多少module，最后都会整合成一个apk。所以我们就有了更新的开发模式，组件化中插件化，这里不详细展开说，今天主题是组件化，我们专一讲好一个主题，后面再安排讲解这种模式。</p>
<h2 id="为什么要组件化"><a href="#为什么要组件化" class="headerlink" title="为什么要组件化"></a>为什么要组件化</h2><p>一开始我们讲解了，什么组件化，以及组件化的好处，以及组件化的大致几个流程，有的同学可能还有很多的疑问，我们一个app运行起来，如果机器配置好点，速度也挺快的，写代码写起来也很舒服，组件化也没必要，可能还认为组件化开发流程复杂，带给我们的价值不大。我想说作为开发者千万不要这么想，我们要想的是这种模式能不能适合我们的场景，任何一种技术都是有场景范围的，不是universal的。我个人认为组件化最大的好处就是解耦合，最大程度的并行开发，非常适合自动化测试，非常适合代码管理，这些同学们不能很好的体会，后面我都会通过事例来讲解，先心中有个印象。</p>
<h2 id="如何组件化"><a href="#如何组件化" class="headerlink" title="如何组件化"></a>如何组件化</h2><p> 组件化开发要简单也可以很简单，要复杂也可以很复杂，但是我们开发就是要偷懒，要写脚本自动化执行我们重复的工作。所以我们如何将复杂的事情转化成简单的脚本，让as帮我们去加载执行。既然组件化是基于as的，那么首先我们需要学习gradle脚本的编写，groovy语言的学习，不同平台的脚本语言学习，比如mac下面的bash语言学习，还有一门辅助脚本的学习python，这些都可以让我们的组件化开发高效，从而提高开发效率，降低开发成本。没有做过组件化架构搭建的同学可能一下子就懵了，这些我都不要会，就会写基础代码，大多数都一样，不会我们学习就好，够用就好，然后不断去深入学习。有了这些基础的东西，下面进展就会比较顺利，不然后面可能很多问题。接下来我们就是需要拆分模块，同时引入基础库，初始化基本配置，配置依赖，这些后面我会通过演示的方式进行讲解。</p>
<h2 id="组件化的基本模型"><a href="#组件化的基本模型" class="headerlink" title="组件化的基本模型"></a>组件化的基本模型</h2><p>基于我对组件化开发的实践，与团队对组件化的理解，我总结出了一套开发模型基本图</p>
<h2 id="组件化开发中的问题"><a href="#组件化开发中的问题" class="headerlink" title="组件化开发中的问题"></a>组件化开发中的问题</h2><p>其实组件化开发中很多问题需要我们解决，我遇到的有，依赖关系的处理，资源重复(通过添加资源前缀)，清单文件的冲突(tools)，打包运行崩溃，直接依赖aar,jar等</p>
<h2 id="组件化测试"><a href="#组件化测试" class="headerlink" title="组件化测试"></a>组件化测试</h2><p>由于业务需求多，我想同学们基本都是很少测试的，即使测试也是run一下，没有写单元测试，这很大原因是写测试代码需要发费很多时间，需要编译整个工程，编译时间太长。组件化之后，我们就很容易测试自己负责的module了，并不需要加载其他人写的module，目前我们可以用自测方式测试，不用自动化测试框架之内的，看个人对测试的兴趣，这部分我也会通过演示的方式，进行讲解,同时可能涉及到application访问的问题，即使在app容器里面也有类似的问题。</p>
<h2 id="组件化组件编译"><a href="#组件化组件编译" class="headerlink" title="组件化组件编译"></a>组件化组件编译</h2><p>组件化编译每个module都是一个aar，所以我们依赖直接aar就好，但是这里需要注意一个问题，就是必须依赖带有依赖文件的aar，比如pom文件，不管本地的还是服务端的，不然运行时可能出现Class找不到的情况。还有一些是生成jar包，直接依赖就好，如果组件化中有插件加载机制，需要注意插件工程依赖共同jar时重复打包问题，provider模式解决这种问题。</p>
<h2 id="组件化打包"><a href="#组件化打包" class="headerlink" title="组件化打包"></a>组件化打包</h2><p>组件化打包其实就是将aar进行整合，然后生成一个apk文件。这个apk可以单独加载，也可以单独运行。</p>
<h2 id="组件化开发闭环链接系统"><a href="#组件化开发闭环链接系统" class="headerlink" title="组件化开发闭环链接系统"></a>组件化开发闭环链接系统</h2><p>组件化闭环系统基本组成:git源代码管理,maven二进制包管理,jenkins打包管理,gerrit代码审查等其他辅助系统，比如mail系统，短信系统。</p>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>同学们的疑问与解答</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主题大纲&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是组件化&lt;/li&gt;
&lt;li&gt;什么是插件化&lt;/li&gt;
&lt;li&gt;为什么要组件化&lt;/li&gt;
&lt;li&gt;如何组件化&lt;/li&gt;
&lt;li&gt;组件化的基本模型&lt;/li&gt;
&lt;li&gt;组件化开发中的问题&lt;/li&gt;
&lt;li&gt;组件化测试&lt;/li&gt;
&lt;li&gt;组件化组件编译&lt;/li&gt;
&lt;li&gt;组件化打包&lt;/li&gt;
&lt;li&gt;组件化开发闭环链接系统&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="android" scheme="http://jackwaylong.github.io/categories/android/"/>
    
    
      <category term="modularity" scheme="http://jackwaylong.github.io/tags/modularity/"/>
    
  </entry>
  
</feed>
