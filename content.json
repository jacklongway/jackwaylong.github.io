[{"title":"单例模式真的很简单吗？","date":"2016-12-02T18:30:04.000Z","path":"2016/12/03/single/","text":"单例模式真的不简单，但是单例模式也是我们开发中常用的一种设计模式,然而不管Github上开源的代码，还是很多开发同学写的单例模式，百花奇放，百家争鸣，各种版本，这篇文章我想跟大家聊聊我心中的单例模式，同时我会给出我心目中的单例模式的各种版本，同时会给出不同版本的优缺点，以及我们最后应该选用哪个版本才是最为安全，优雅，同时性能也是比较好的，最后我想说，安全，性能是一个折中的考虑。 单例对象创建的一般步骤 构造函数private 定义static成员变量 提供static getInstance 方法获取对象 SingletonV1123456789101112131415public class SingletonV1 &#123; private static SingletonV1 sInstance; private SingletonV1() &#123; &#125; public static SingletonV1 getInstance() &#123; if (sInstance == null) &#123; sInstance = new SingletonV1(); &#125; return sInstance; &#125;&#125; 这个版本是最简单的方式创建单例对象,但是这个版本只适合单线程场景下，在并发条件下，不能保证对象为唯一性，如果有同学也这么实现的，赶紧反思一下。 SingletonV21234567891011121314public class SingletonV2 &#123; private static SingletonV2 sInstance; private SingletonV2() &#123; &#125; public static synchronized SingletonV2 getInstance() &#123; if (sInstance == null) &#123; sInstance = new SingletonV2(); &#125; return sInstance; &#125;&#125; 这个版本跟第一个版本的区别就是多了个synchronized关键字，暂且我们这么理解，这个关键字是保证保证线程安全的，这样一来，我们保证了单例，确实没错，但是这个版本并不是我想要的，为什么了？因为这个锁是方法锁，意味着性能损失较大，至于为什么损失较大，这里就不展开讲了，有疑问的同学可以评论里，向我提问。 SingletonV312345678910111213141516public class SingletonV3 &#123; private static SingletonV3 sInstance; private SingletonV3() &#123; &#125; public static SingletonV3 getInstance() &#123; synchronized (SingletonV3.class) &#123; if (sInstance == null) &#123; sInstance = new SingletonV3(); &#125; &#125; return sInstance; &#125;&#125; 这个版本看上去是代码段局部锁，但是我们仔细一看，其实跟第二个版本一模一样，没有本质区别，所以这个版本也不是我们想要的。 SingletonV4123456789101112131415161718public class SingletonV4 &#123; private static SingletonV4 sInstance; private SingletonV4() &#123; &#125; public static SingletonV4 getInstance() &#123; if (sInstance == null) &#123; synchronized (SingletonV4.class) &#123; if (sInstance == null) &#123; sInstance = new SingletonV4(); &#125; &#125; &#125; return sInstance; &#125;&#125; 这个版本最大的改进是在第三个版本的基础上实现了双层检测，在某种层度上，性能有所提升，但是是不是就没有安全问题了，不是的，这个版本也不是我们想要的，因为在指令重排的情况下，会出错，在这里也不打算展开讲为什么会出现这中诡异的现象，有想知道原因的，可以在评论里，向我提问。 SingletonV512345678910111213141516public class SingletonV5 &#123; private static SingletonV5 sInstance; private SingletonV5() &#123; &#125; public static SingletonV5 getInstance() &#123; if (sInstance == null) &#123; synchronized (SingletonV5.class) &#123; sInstance = new SingletonV5(); &#125; &#125; return sInstance; &#125;&#125; 这个版本有在并发的环境下很难保证单例，也有可能报错。 SingletonV612345678910111213141516171819202122public class SingletonV6 &#123; private static volatile SingletonV6 sInstance; private SingletonV6() &#123; &#125; protected Object readResolve() &#123; return getInstance(); &#125; public static SingletonV6 getInstance() &#123; if (sInstance == null) &#123; synchronized (SingletonV6.class) &#123; if (sInstance == null) &#123; sInstance = new SingletonV6(); &#125; &#125; &#125; return sInstance; &#125;&#125; 这个版本算比较完美了，在某种条件下，保证了单例，同时性能也有了一定的保证，同时反序列化也保证了单例，但是这种是不是也就没问题了，错了，这个版本在jdk1.5之后才能算完美，以前版本还是有问题的, 这里不展开讲原因，有疑问的同学在下面的评论，可以向我提问。 SingletonV7123public enum SingletonV7 &#123; INSTANCE&#125; 这个版本是上一个版本的增强版，同时也是最优雅的版本，也是最为安全的版本，性能也是较好的版本，同时基于自身特点保证了序列化，反序列化的安全，同时也是目前最为推荐使用的单例版本，这里不展开讲原因，有兴趣的同学，可以在下面的评论，向我提问。 SingletonV812345678910111213public class SingletonV8 &#123; private SingletonV8() &#123; &#125; private static class SingletonHolder &#123; private static final SingletonV8 INSTANCE = new SingletonV8(); &#125; public static SingletonV8 getInstance() &#123; return SingletonHolder.INSTANCE; &#125;&#125; 这个版本也是虚拟机能够保证安全的版本，但是需要额外的内部类提供保证，空间复杂度比上面版本大，综合考虑还是考虑枚举版本 SingletonV91234567891011public class SingletonV9 &#123; private static final SingletonV9 INSTANCE = new SingletonV9(); private SingletonV9() &#123; &#125; public static SingletonV9 getInstance() &#123; return INSTANCE; &#125;&#125; 这个版本也是安全的，但是有个缺陷就是这个类只要其中有个静态成员加载，那么就会创建对象，也是我们经常说的饿汉式模式，上面的版本都是懒汉式模式，对于这两种模式不太了解的，可以在下面的评论，向我提问。 扩展 对象创建的不同方式，以及不同点 对象的创建过程 classloader的namespace 虚拟机实例的个数对对象的影响 继承对对象创建的影响 对象代码复用 对象锁，类锁，全局锁的区别 锁中的坑 这篇由于主要由浅入深的讲解单例，上面的扩展就不展开讲了，如果有感兴趣的同学，可以在评论里，向我提问，我会详细解答的，后面的文章我也会由浅入深的讲解。 总结看似很简单一种设计模式，其实我们深入思考一下，就没那么简单了，中间有很多技术点，有很多细节需要我们去挖掘，思考，最后推荐SingletonV7版本，注意这个只是保证了对象创建安全，对象成员的安全，还需要我们自己去保证。希望阅读过这篇文章的同学，再也不要写不安全的单例对象代码了，代码改进的一小步，程序稳定，可靠的一大步。 可能的疑问有的同学可能会在想，客户端平台不是不建议enum吗？确实没错，那是很早以前android官网也不建议使用，但是现在你去看官网还能看到那句话吗？google已经去掉了，至于为什么去掉了，我个人认为，有几种可能的原因，第一个是目前机器的配置，现在的cpu，内存等配置跟以前都不是在一个级别上，第二个就是软件层运行时对代码优化。另外还有JakeWharton大神都不考虑这个了，我们还有什么理由考虑这些了，其实真的没必要考虑这个了。","tags":[{"name":"single","slug":"single","permalink":"http://jackwaylong.github.io/tags/single/"},{"name":"volatile","slug":"volatile","permalink":"http://jackwaylong.github.io/tags/volatile/"},{"name":"synchronized","slug":"synchronized","permalink":"http://jackwaylong.github.io/tags/synchronized/"},{"name":"enum","slug":"enum","permalink":"http://jackwaylong.github.io/tags/enum/"}]},{"title":"揭开Gradle的神秘面纱","date":"2016-11-28T16:32:01.000Z","path":"2016/11/29/gradle/","text":"gradle前言 在解开gradle神秘面纱前,我想说一下gradle是如此的强大,在我看来在目前互联网爆炸的时代,构建工具也不少,比如以前我接触的Ant,maven等,在这里只想说我接触gradle并且去研究之后,从此我就爱上了gradle的强大，灵活，高效，并且可以让我们android开发者上手快，这是因为我们android开发的主要语言是java，java是基于虚拟的一种语言，而gradle的最终产物也是java子节码，所以我认为我们写gadle代码就是写业务代码，当然也有不同，那就是dsl特性，后面会慢慢展开讲解，让大家真正的去理解gradle的强大，并且能够真正的在as的强大能力下，能够将gardle真正运用好，提高开发效率。这里我并不是吐槽其他构件工具不好,没有最好，只有更好，更适合，从客户端构件角度来看，我个人觉得gradle非常适合，下面将解开gradle一层一层的面纱。gradle大纲 gradle是什么 gradle的好处 gradle内部构建原理 如何使用gradle提高工作效率 gradle工程构建流 gradle实战 gradle是什么 gradle其实是一套构件工具机,使用groovy语言的DSL特性以及java的灵活特性进行构建,还有很多特性大家可以去gradle.org官网进行深入的学习或者google找相关资料了解 gradle的好处 其实我们学习一门技术肯定是有对应的好处我们才去学习对吧,不管好处多大,起码能帮助我们工作,毕竟我们都是上班的码农,我个人认为gradle最大的好处就是能够让我们更关注我们最关注的，不需要关注那些与我们关系不大的，毕竟我们不需要关注，然而这样就让我们失去了很多的深入学习的机会，导致我们养成了只要能用就行的思维，在我看来懒惰使人进步，为了想懒惰我一定要去思考如何自动化的去解决问题，gradle满足了我的目标，非常强大。 gradle的内部构建原理 在讲解内部构件原理之前，我想讲解下我是如何去理解gradle这玩意的，gradle按照一般写业务代码的思维还是有点区别的，毕竟领域不同，gradle写的是脚本，却运行的java子节码，所以我这么思考，我用写java运行时的思维去写gradle脚本，然后学习gradle dsl特性，这样以来，理解这个构建工具就非常流畅了，不然我是理解不好的，每个人都有自己的理解方式，找自己最好的理解方式就好。gradle构建内部运行机制是这样的，首先初始化构建引擎，然后将脚本转换成java代码,然后就是我们最熟悉的构建过程了,将java代码转换成子节码,然后交给虚拟机加载执行 如何使用gradle提高工作效率 我个人认为构建工具毕竟是一种工具特性,那么就一套完善的高效特性让我去挖掘,我目前挖掘的有利用as的工程特性，结合gradle的强大构建特性，自动化分析文件，自动化打包，模版构建，后面不断有新的挖掘，我相信只要是工具类的东西然后结合我们的技术手段那么肯定会提高我们的工作效率，可能需要手动10分钟的事情，而用gradle处理只要1分钟，甚至更短，错误几率也大大减低，减除人工干预，毕竟现在是人工智能时代，感觉我们会被计算机征服，真可怕，我们唯一能做的就是提升自己。 gradle工程构建流 as gradle工程构建流图示 gradle实战 构建脚本集 settings.gradle root build.gradle init.gradle utils.gradle tasks.gradle submodle build.gradle common.properties template/project.properties publish.bat/publish.sh properties gradle插件开发 插件开发基本流程 插件工程一般结构 插件开发语言(java,gradle,groovy等等) 插件打包 插件部署 插件访问 总结 到此gradle基本构建流已经说完了,这些只是构建的开始,后面我还会继续深入gradle在组件化开发中的作用以及强大支撑，只有明白了gradle的基本工作原理，我们才能更好的去灵活运用gradle来拆分我们的工程，很好的解耦我们的工程，目前比较的多的开发模式有组件化，插件化，我个人理解gradle就是开发模式的驱动者，学好gradle才是根本，才能很好的进行模式开发，gradle网上的指导资料很少，基本都是一些用法，没有分析原理的，对于技术者我强烈建议学习一门技术还是去对应的官网，这样不仅仅能系统的学习，并且还能更为深入的理解语言的本质。 建议 工程构建一般是跨界的，也就是说可能会涉及到很多种技术的融合，我目前接触到的有python，groovy，bash，bat 等脚本语言，希望大家不要仅仅停留在android业务开发中，技术融合才能让自己强大，多学习不同技术提高自己的维度，深度，广度。 后续gradle学习计划 继续深入gradle构建流 gradle源码分析 发现gradle中好玩的东西，灵活运用到实际项目中 基于gradle构建项目到产品输出闭环 gradle项目地址 下载 github查看","tags":[{"name":"gradle","slug":"gradle","permalink":"http://jackwaylong.github.io/tags/gradle/"}]},{"title":"modularity","date":"2016-11-27T08:50:54.000Z","path":"2016/11/27/modularity/","text":"主题大纲 什么是组件化 什么是插件化 为什么要组件化 如何组件化 组件化的基本模型 组件化开发中的问题 组件化测试 组件化组件编译 组件化打包 组件化开发闭环链接系统 Q&amp;A 什么是组件化在了解组件化之前,我们首先回顾一下目前非组件化工程的基本结构,首先我想说大家最想说的是as编译太慢,编译让人蓝瘦香菇，并且谁者业务需求越来越多，代码越来越多，编译时间线性增加，有些同学可能会通过自己机器的配置对应的设置，as的编译配置文件，增量编译，但是这样的结果还不是很明显，一方面由于as对增量编译的支持力度，在这个过程中有代码缓存问题。我们通过clean去解决，这样会导致重新build，从而导致编译时间还是很长，编译就像as给予我们放松的时刻。面对上面的这些问题，我相信我们很多同学都思考过，拆分当个工程为多个工程，然后模块编译，模块测试，最后整合若干模块称为一个apk，没错，思路是对的，但是为什么这些理论很难得到实践了。这就是我们经常说的，理想很丰满，现实很骨感。当我们找到一个理论突破口的时候，就感觉很满足，就觉得就这样。我想说我们必须实践，熟话说，实践才是检验真理的唯一标准，我们需要思考，学习，实践，用理论去解决实际问题。我个人认为as与生俱来就是提供开发者模块化的ide，很多同学可能有疑问，为什么这么认为，我们开发时仅仅把as看作一个开发辅助工具，但是我们站在更高的角度去思考，其实as给我们不仅仅是一种工具，而是一种给予我们基于这个工具去能创造，创新开发模式的软件。明白了这些，那么组件化到底是什么了，我看目前网上关于组件化开发的文章，这说明也有很多在开发中实践的，我个人认为还是不够完善，或者说很多问题，很多坑。我对组件化的理解就是module化开发，module测试，module打包，module发包，module集成，module暴露，下面详细说这些具体怎么做。 什么是插件化有的同学很能有很大的疑问，主题是组件化，为什么要了解什么是插件化，这里只是说明一下插件化与组件化的区别，让我们实践过程中能够分清开发界限，能够将组件化做的更好。插件化是很多的开发模式，我们明白一点就可以了，插件化是单独的apk，jar，zip，dex，资源，so等。将这些进行动态加载，然而组件化本质还是一个主apk。不管多少module，最后都会整合成一个apk。所以我们就有了更新的开发模式，组件化中插件化，这里不详细展开说，今天主题是组件化，我们专一讲好一个主题，后面再安排讲解这种模式。 为什么要组件化一开始我们讲解了，什么组件化，以及组件化的好处，以及组件化的大致几个流程，有的同学可能还有很多的疑问，我们一个app运行起来，如果机器配置好点，速度也挺快的，写代码写起来也很舒服，组件化也没必要，可能还认为组件化开发流程复杂，带给我们的价值不大。我想说作为开发者千万不要这么想，我们要想的是这种模式能不能适合我们的场景，任何一种技术都是有场景范围的，不是universal的。我个人认为组件化最大的好处就是解耦合，最大程度的并行开发，非常适合自动化测试，非常适合代码管理，这些同学们不能很好的体会，后面我都会通过事例来讲解，先心中有个印象。 如何组件化 组件化开发要简单也可以很简单，要复杂也可以很复杂，但是我们开发就是要偷懒，要写脚本自动化执行我们重复的工作。所以我们如何将复杂的事情转化成简单的脚本，让as帮我们去加载执行。既然组件化是基于as的，那么首先我们需要学习gradle脚本的编写，groovy语言的学习，不同平台的脚本语言学习，比如mac下面的bash语言学习，还有一门辅助脚本的学习python，这些都可以让我们的组件化开发高效，从而提高开发效率，降低开发成本。没有做过组件化架构搭建的同学可能一下子就懵了，这些我都不要会，就会写基础代码，大多数都一样，不会我们学习就好，够用就好，然后不断去深入学习。有了这些基础的东西，下面进展就会比较顺利，不然后面可能很多问题。接下来我们就是需要拆分模块，同时引入基础库，初始化基本配置，配置依赖，这些后面我会通过演示的方式进行讲解。 组件化的基本模型基于我对组件化开发的实践，与团队对组件化的理解，我总结出了一套开发模型基本图 组件化开发中的问题其实组件化开发中很多问题需要我们解决，我遇到的有，依赖关系的处理，资源重复(通过添加资源前缀)，清单文件的冲突(tools)，打包运行崩溃，直接依赖aar,jar等 组件化测试由于业务需求多，我想同学们基本都是很少测试的，即使测试也是run一下，没有写单元测试，这很大原因是写测试代码需要发费很多时间，需要编译整个工程，编译时间太长。组件化之后，我们就很容易测试自己负责的module了，并不需要加载其他人写的module，目前我们可以用自测方式测试，不用自动化测试框架之内的，看个人对测试的兴趣，这部分我也会通过演示的方式，进行讲解,同时可能涉及到application访问的问题，即使在app容器里面也有类似的问题。 组件化组件编译组件化编译每个module都是一个aar，所以我们依赖直接aar就好，但是这里需要注意一个问题，就是必须依赖带有依赖文件的aar，比如pom文件，不管本地的还是服务端的，不然运行时可能出现Class找不到的情况。还有一些是生成jar包，直接依赖就好，如果组件化中有插件加载机制，需要注意插件工程依赖共同jar时重复打包问题，provider模式解决这种问题。 组件化打包组件化打包其实就是将aar进行整合，然后生成一个apk文件。这个apk可以单独加载，也可以单独运行。 组件化开发闭环链接系统组件化闭环系统基本组成:git源代码管理,maven二进制包管理,jenkins打包管理,gerrit代码审查等其他辅助系统，比如mail系统，短信系统。 Q&amp;A同学们的疑问与解答","tags":[{"name":"modularity","slug":"modularity","permalink":"http://jackwaylong.github.io/tags/modularity/"}]}]