[{"title":"线程启动之后可以停止吗?","date":"2016-12-12T06:17:50.000Z","path":"2016/12/12/thread-stop/","text":"异步任务最后都会回归到Thread这个类，所以我们很有必要深入理解一下这个类，才能写基础框架，才能理解目前大名鼎鼎的线程池框架，不得不佩服并发大神Doug Lea对java并发做出的共享，也就是很多人所说，java具有先天高并发的特性。下面分析一下我们常见的场景，任务的停止处理. stop 有作用吗? 肯定是不好使的, 抛出UnsupportedOperationException,并且如果我们程序没处理异常，直接导致程序crash，那我们怎么才能stop了,下面通过两种方式实现stop,但是也是不可靠的,毕竟是一种协助stop。 解决方式 stop flag interrupted stop flag1234567891011121314151617181920212223private static final String TAG = ThreadInterrupt.class.getSimpleName(); private volatile boolean isStop; public ThreadInterrupt2() &#123; start(); &#125; @Override public void run() &#123; super.run(); while (!isStop) &#123; System.out.println(\"run......\"); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; public void stopThread() &#123; isStop = true; &#125; interrupted1234567891011121314151617181920212223242526private static final String TAG = ThreadInterrupt.class.getSimpleName(); private Thread mThread; public ThreadInterrupt() &#123; mThread = new Thread(this); mThread.start(); &#125; @Override public void run() &#123; while (!Thread.currentThread().isInterrupted()) &#123;// 判断是否被打断，但是不会清除打断标志 Log.e(TAG, \"alive......\"); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); Log.e(TAG, Thread.currentThread().interrupted() + \"\");// 是否打断，同时清除打断标志 Thread.currentThread().interrupt(); // 打断复原,根据需求是否需要复原 &#125; &#125; Log.e(TAG, \"stop......\"+Thread.currentThread().interrupted()+\"/\"+Thread.currentThread().interrupted()); // true/false &#125; public void stop() &#123; mThread.interrupt(); &#125; 注意上面两种都可以实现线程的停止,那么哪种更好了，我建议用第二种，首先无需定义额外的标志，然后就是代码比较清晰，充分利用了内部特性，并且更高效，可靠。 为什么第一种实现不好了?首先需要定义额外标志，意味着需要额外的存储空间，同时volatile jdk1.5之前不可靠，意味着不能真正停止任务，sleep必须等待有线程打断才可能停止任务。","tags":[{"name":"thread","slug":"thread","permalink":"http://jackwaylong.github.io/tags/thread/"},{"name":"runnable","slug":"runnable","permalink":"http://jackwaylong.github.io/tags/runnable/"},{"name":"stop","slug":"stop","permalink":"http://jackwaylong.github.io/tags/stop/"}]},{"title":"git submodule","date":"2016-12-08T03:36:11.000Z","path":"2016/12/08/gitsubmodule-1/","text":"有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。 我们举一个例子。 假设你正在开发一个网站然后创建了 Atom 订阅。 你决定使用一个库，而不是写自己的 Atom 生成代码。 你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。 如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。 如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。 Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。 开始使用子模块我们将要演示如何在一个被分成一个主项目与几个子项目的项目上开发。git submodule add &lt;repository&gt; [path] path是可选字断，默认子模块的工程名主工程添子模块之后,只会克隆工程空目录，然后进入子工程目录执行git submodule init, git submodule update或者git submodule update --init 拉取子工程文件,运行git status 你会注意到工程主目录添加了.gitmodules文件与子工程的目录,.gitmodules纪录所有子模块与物理路径的映射。git diff --cached submodulename 列出子模块改变，在主工程使用git commit -am&#39;xxx&#39;提交子模块工程的纪录为160000模式， 这是 Git 中的一种特殊模式，它本质上意味着你是将一次提交记作一项目录记录的，而非将它记录成一个子目录或者一个文件 克隆有子模块的项目首先克隆主工程 git clone &lt;repository&gt; [-b &lt;name&gt;],主工程根目录包含.gitmodules文件纪录了所有的子模块,进入子模块,执行git submodule init 初始化子工工程,git submodule update 更新子工程,简便方式git clone --recursive &lt;repository&gt; 递归初始化更新子工程,有时需要进入子模块git merge origin/master 合并上游的更新 在包含子模块的项目上工作 拉取上有修改 在项目中使用子模块的简单模型就是拉取子模块最新纪录，git fetch, git merge origin/master 拉取合并上游最新更新在主工程目录运行git diff --submodule 显示最新提交与提交的列表,设置log默认行为git config --global diff.submodule log ,在主工程中更新子模块git submodule update --remote &lt;submodulename&gt; 此命令默认会假定你想要更新并检出子模块仓库的 master 分支。 不过你也可以设置为想要的其他分支。 例如，你想要子模块跟踪仓库的 “stable” 分支，那么既可以在 .gitmodules 文件中设置（这样其他人也可以跟踪它），也可以只在本地的 .git/config 文件中设置。 让我们在 .gitmodules 文件中设置它：git config -f .gitmodules submodule.&lt;submodulename&gt;.branch &lt;branchname&gt; 如果不用 -f .gitmodules 选项，那么它只会为你做修改。但是在仓库中保留跟踪信息更有意义一些，因为其他人也可以得到同样的效果。如果你设置了配置选项 status.submodulesummary，Git 也会显示你的子模块的更改摘要：git config status.submodulesummary 1 ,这时如果运行 git diff，可以看到我们修改了 .gitmodules 文件，同时还有几个已拉取的提交需要提交到我们自己的子模块项目中。这非常有趣，因为我们可以直接看到将要提交到子模块中的提交日志。 提交之后，你也可以运行 git log -p 查看这个信息。git log -p --submodule 当运行 git submodule update --remote 时，Git 默认会尝试更新所有子模块，所以如果有很多子模块的话，你可以传递想要更新的子模块的名字。在子模块上工作 你很有可能正在使用子模块，因为你确实想在子模块中编写代码的同时，还想在主项目上编写代码（或者跨子模块工作）。 否则你大概只能用简单的依赖管理系统（如 Maven 或 Rubygems）来替代了。 现在我们将通过一个例子来演示如何在子模块与主项目中同时做修改，以及如何同时提交与发布那些修改。到目前为止，当我们运行 git submodule update 从子模块仓库中抓取修改时，Git 将会获得这些改动并更新子目录中的文件，但是会将子仓库留在一个称作 “游离的 HEAD” 的状态。 这意味着没有本地工作分支（例如 “master”）跟踪改动。 所以你做的任何改动都不会被跟踪。 为了将子模块设置得更容易进入并修改，你需要做两件事。 首先，进入每个子模块并检出其相应的工作分支。 接着，若你做了更改就需要告诉 Git 它该做什么，然后运行 git submodule update --remote 来从上游拉取新工作。 你可以选择将它们合并到你的本地工作中，也可以尝试将你的工作变基到新的更改上。 首先，让我们进入子模块目录然后检出一个分支。git checkout &lt;branchname&gt;然后尝试用 “merge” 选项。 为了手动指定它，我们只需给 update 添加 –merge 选项即可。 这时我们将会看到服务器上的这个子模块有一个改动并且它被合并了进来。git submodule update --remote --merge如果我们现在更新子模块，就会看到当我们在本地做了更改时上游也有一个改动，我们需要将它并入本地。git submodule update --remote --rebase如果你忘记 –rebase 或 –merge，Git 会将子模块更新为服务器上的状态。并且会将项目重置为一个游离的 HEAD 状态。git submodule update --remote即便这真的发生了也不要紧，你只需回到目录中再次检出你的分支（即还包含着你的工作的分支）然后手动地合并或变基 origin/stable（或任何一个你想要的远程分支）就行了。 如果你没有提交子模块的改动，那么运行一个子模块更新也不会出现问题，此时 Git 会只抓取更改而并不会覆盖子模块目录中未保存的工作。git submodule update --remote如果你做了一些与上游改动冲突的改动，当运行更新时 Git 会让你知道。你可以进入子模块目录中然后就像平时那样修复冲突发布子模块改动现在我们的子模块目录中有一些改动。 其中有一些是我们通过更新从上游引入的，而另一些是本地生成的，由于我们还没有推送它们，所以对任何其他人都不可用。git diff如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到麻烦，因为他们无法得到依赖的子模块改动。 那些改动只存在于我们本地的拷贝中。 为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。 git push 命令接受可以设置为 “check” 或 “on-demand” 的 –recurse-submodules 参数。 如果任何提交的子模块改动没有推送那么 “check” 选项会直接使 push 操作失败。git push --recurse-submodules=check如你所见，它也给我们了一些有用的建议，指导接下来该如何做。 最简单的选项是进入每一个子模块中然后手动推送到远程仓库，确保它们能被外部访问到，之后再次尝试这次推送。git push --recurse-submodules=on-demand合并子模块改动 如果你其他人同时改动了一个子模块引用，那么可能会遇到一些问题。 也就是说，如果子模块的历史已经分叉并且在父项目中分别提交到了分叉的分支上，那么你需要做一些工作来修复它。 如果一个提交是另一个的直接祖先（一个快进式合并），那么 Git 会简单地选择之后的提交来合并，这样没什么问题。不过，Git 甚至不会尝试去进行一次简单的合并。 如果子模块提交已经分叉且需要合并，那你会得到类似下面的信息：git pull所以本质上 Git 在这里指出了子模块历史中的两个分支记录点已经分叉并且需要合并。 它将其解释为 “merge following commits not found”（未找到接下来需要合并的提交），虽然这有点令人困惑，不过之后我们会解释为什么是这样。 为了解决这个问题，你需要弄清楚子模块应该处于哪种状态。 奇怪的是，Git 并不会给你多少能帮你摆脱困境的信息，甚至连两边提交历史中的 SHA-1 值都没有。 幸运的是，这很容易解决。 如果你运行 git diff，就会得到试图合并的两个分支中记录的提交的 SHA-1 值。git diff diff --cc DbConnector index eb41d76,c771610..0000000 --- a/DbConnector +++ b/DbConnector 所以，在本例中，eb41d76 是我们的子模块中大家共有的提交，而 c771610 是上游拥有的提交。 如果我们进入子模块目录中，它应该已经在 eb41d76 上了，因为合并没有动过它。 如果不是的话，无论什么原因，你都可以简单地创建并检出一个指向它的分支。 来自另一边的提交的 SHA-1 值比较重要。 它是需要你来合并解决的。 你可以尝试直接通过 SHA-1 合并，也可以为它创建一个分支然后尝试合并。 我们建议后者，哪怕只是为了一个更漂亮的合并提交信息。 所以，我们将会进入子模块目录，基于 git diff 的第二个 SHA 创建一个分支然后手动合并。 子模块技巧git submodule foreach &#39;git stash&#39;git submodule foreach &#39;git checkout -b featureA&#39;git submodule foreach &#39;git diff&#39;有用的别名 你可能想为其中一些命令设置别名，因为它们可能会非常长而你又不能设置选项作为它们的默认选项。 我们在 Git 别名 介绍了设置 Git 别名，但是如果你计划在 Git 中大量使用子模块的话，这里有一些例子。 $ git config alias.sdiff &#39;!&#39;&quot;git diff &amp;&amp; git submodule foreach &#39;git diff&#39;&quot;$ git config alias.spush &#39;push --recurse-submodules=on-demand&#39;$ git config alias.supdate &#39;submodule update --remote --merge&#39;","tags":[{"name":"git","slug":"git","permalink":"http://jackwaylong.github.io/tags/git/"},{"name":"submodule","slug":"submodule","permalink":"http://jackwaylong.github.io/tags/submodule/"}]},{"title":"一线互联网公司面试简单分析","date":"2016-12-07T10:46:41.000Z","path":"2016/12/07/interview-1/","text":"介绍自己负责的部分，如何实现的。 自定义view viewGroup activity的启动流程 事件传递及滑动冲突的处理 插件化（activity如何加载及资源处理 内存优化 ，如何避免oom 内存泄漏如何处理及如何排查 handler问题 图片加载用的什么以及原理 从一堆数据里怎么查找最大的n个数 快速排序 字符串匹配 介绍自己负责的部分，如何实现的 这个把自己负责的模块说清楚就好,一般有一下几个方面可以说一下，前提是不要给自己挖坑 自己负责模块在整个项目中的角色,也就是功能描述 开发前的自己的一些思考,比如对业务的抽象,接口的定义，协议的定义等等 开发编码过程中遇到的难点以及坑 排查问题以及结解决方式 兼容性保证 性能优化 上线之后模块导致crash的比例 自定义view viewGroup 这个就是约定的几个方法,onMeasure,onLayout,onDraw,measure,layout,draw同时注意写方法的调用时机以及区别,比如onMeasure是个模版方法是在measure下调用的,这个方法在viewGroup里面,自定义的这些就已经足够了，如果还扩展一些更新问题，子线程能不能更新，是可以的,在ViewRootImpl没创建之前可以更新，不同sdk这个类可能名字不一样。 activity的启动流程 这个肯定不是说activity的生命周期，是启动加载过程,大致说下流程,具体的要自己看代码了，大致过程有:这里可能分好几种情况,其实都差不很多，这里就说一种情况,startActivity这个怎么启动Activity的,startActivity-&gt;ActivityManagerService-&gt;ActivityThread-&gt;Activity,大概参与就这几个核心类,里面经过了两层binder通信,最后路由到IApplicationThread,然后到ActivityThread中的H消息队列中启动Activity，细节很多，可以在评论询问。 事件传递及滑动冲突的处理 事件传递理解成责任链式调用就好，也就是从最内层到外层时间委派，如果事件consume了，那么就给这个view处理，不然从外向内冒泡，冲突处理举个实例就好，比如SlideMenu与banner或者ListView与Scrollview的冲突等等，说出基本思路就行，这些解决一般都是重写那几个事件方法，然后各种判断就好 插件化（activity如何加载及资源处理) Activity使用占坑hook加载,也可以使用静态代理，静态代理就需要自定义classloader,记住这个加载模式就行，再多细节在评论回复吧，资源处理就是assetmanager的创建，然后资源冲突处理，简单的可以构建多个assetmanager就没有冲突问题，应为隔离了，如果使用一个那么打包aapt定制一下就行,还有很多细节，在评论回复吧，说不完了。 内存优化 ，如何避免oom 内存优化太多要说的了，有套路的回答，基本就是避免跟gc配合好工作，比如：尽量复用对象，处理无用对象，避免内存泄漏，压缩对象等等，尽量将大对象特殊处理，比如bitmap占用内存较多，可以jni层与java层配合一起，大小压缩，质量压缩，imsimplesize的大小定义，规范等等，程序中有内存管理模块，避免内存压力大的时候，能够释放内存，避免oom发生的几率，还有很多方面，在评论回复吧。 内存泄漏如何处理及如何排查 内存泄漏最大的问题就是无用对象常驻内存，导致内存压力很大，最后可能导致oom发生。尽量将对象生命周期可以在控制的能力之内，具体的在回复说吧，也很多场景,比如：context 除了特殊情况用activity，其他我们没理由不用application。排查导出堆空间，然后mat分析，程序里面用leackcanary定位。 handler问题 这个需要回复两个基本的，首先handler的创建需要loop，loop怎么创建的，同时这个里面怎么保证loop线程安全的，还有就是消息如何分发的，也就是消息发送到接受的流程，还有callback对消息处理的影响，这些足够了，还可以说可以跨进程，这样就更棒了，具体的在回复说，太多了。 图片加载用的什么以及原理 图片加载的太多了，说个自己非常熟悉的就行，不要给自己挖坑，都懂的，比如你熟悉uil，那就说具体的加载过程，套路都差不多，都是创建图片task，先从缓存取出来，取不到就去网络下载，下载完之后，同时缓存起来，这里需要说下，线程池，队列，pause，resume的具体细节，比如跟view，activity的绑定关系。回复具体说，也很多 从一堆数据里怎么查找最大的n个数 这个用归并排序，或者直接快排，没啥还说的。不会的自己google看算法，算法后面我会写出来到文章里面。 快速排序 基本思想挖坑，分而治之，按照这个思路看代码就行 字符串匹配 这个kmp算法，或者最基本的吧，不考虑时间，空间复杂度的条件下，但是不要说这个，太low了点。其实这些算法背下来就好，不是业务场景的，意义不大，但是必须要会,不然吃亏了 架构 其实架构没有固定模式，能够说出自己对架构的理解就很好，比如mvp，不同人对这个理解不一样，最好的，够用的，最适合业务的才是好架构，这个也很多要说，评论说吧。","tags":[{"name":"alog","slug":"alog","permalink":"http://jackwaylong.github.io/tags/alog/"},{"name":"ams","slug":"ams","permalink":"http://jackwaylong.github.io/tags/ams/"}]},{"title":"打破标准的第一个OC程序","date":"2016-12-06T13:36:07.000Z","path":"2016/12/06/ios-oc-1/","text":"平时我们写程序第一个程序都是hello world,这次开始就不用老套路了，用字符串的基本用法开始，我认为标准的hello world 其实就是一个字符串,但是我们从程序的角度看，就是一个空虚的字符串，不能让我们想到更多，我想如果能否说一些字符串的基本操作可能更有意思，一方面是基础语法，另一方面也理解了oc字符串对象与java的不同点。 NSString oc里面对象都是以NS开头的，记住就行，要想知道为什么的去google吧! oc里面的字符串与java最大的不同就是，java里面是个引用，而oc里面是个指针，跟c/c++ 很类似。 1234567891011121314151617181920212223#import &lt;Foundation/Foundation.h&gt;int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; // insert code here... // 字符串 NSString* str = @\"first oc\"; NSUInteger len = str.length; // 获取字符串的长度，跟java差不多，只是java是一个方法，而oc是一个属性 BOOL contain = [str containsString:@\"bc\"]; // 判断子串 NSLog(@\"str:%@ contain %@ %hhd\",str,@\"bc\",contain); // 格式化打印,跟c/c++ printf长的很像，跟java的System.out.println 差不多 NSString* result = [str stringByReplacingCharactersInRange:NSMakeRange(0, 1) withString:@\"b\"]; // 字符串子串替换 NSString* sub = [str substringFromIndex:3]; // 获取子串 NSLog(@\"%@ %lu %@ sub\", str,len,sub); NSLog(@\"result:%@\",result); for (int i=0; i&lt; len; ++i) &#123;// 遍历字符串 NSLog(@\"c:%c\",[str characterAtIndex:i]); &#125; // 静态方法 将字符数组转换成os string NSString* chars = [NSString stringWithCString:\"oc\" encoding:NSUTF8StringEncoding]; NSLog(@\"chars %@\",chars); &#125; return 0;&#125; oc 里面导入基础库跟java一样，只是java导入的是类或者静态方法，而oc导入的是头文件，也是是实现的声明，因为oc不开源，我们只能通过看到头文件的具体声明。其中oc里面Foundation.h 这个是基础更能核心库，后面还有uikit等核心库。第一个程序看起来很简单，其实里面很多语法细节，后面慢慢来讲吧，往往简单的东西背后都是复杂。","tags":[{"name":"oc","slug":"oc","permalink":"http://jackwaylong.github.io/tags/oc/"},{"name":"NSString","slug":"NSString","permalink":"http://jackwaylong.github.io/tags/NSString/"}]},{"title":"wait和sleep 深度分析","date":"2016-12-05T06:08:43.000Z","path":"2016/12/05/wait-sleep/","text":"首先我们需要明白wait与sleep的区别，区别大致有下面几个方面: wait是Object中的方法,sleep是Thread中的方法 wait必须在同步代码块中调用，也就是说必须首先获得监视器锁，然后才能调用,sleep可以在任何可能的地方调用 wait释放锁,sleep不释放锁 wait尽可能的少消耗cpu资源,sleep消耗更多的cpu资源 下面分析一种wait协助的场景，如果换成sleep可能导致死锁 wait协助代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class TestThread &#123; private static final String TAG = TestThread.class.getSimpleName(); private static final Map&lt;String, Object&gt; MAP = new WeakHashMap&lt;&gt;(); private static final Object WAIT = new Object(); public Object get(String key) &#123; Object object; synchronized (MAP) &#123; Log.e(TAG, \"tid:\" + Thread.currentThread().getId()); do &#123; object = MAP.get(key); if (object == WAIT) &#123;// 线程等待 Log.e(TAG, \"wait......\"); try &#123; MAP.wait(); //Thread.sleep(1000); Log.e(TAG,\"wake....\"); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; else if (object != null) &#123; // hit Log.e(TAG, \"hit:\" + object); return object; &#125; else &#123; MAP.put(key, WAIT); // 存放wait对象 break; &#125; &#125; while (true); &#125; Log.e(TAG, \"generate....\"); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; synchronized (MAP) &#123; object = UUID.randomUUID().toString(); Log.e(TAG, object.toString()); if (object != null) &#123; MAP.put(key, object); // 存放真正数据 &#125; else &#123; MAP.remove(key); // 如果获取数据失败,需要删除对应的key,让等待对象自己获取 &#125; MAP.notifyAll(); // 通知在MAP上的所有等待对象 &#125; return object; &#125;&#125; 上面代码可以正常协助,如果将MAP.wait() 替换成 Thread.sleep(1000) 就很可能导致死锁 注意 通过上面代码我们在写并发代码的时候，一定要理解场景，不然真的很危险.","tags":[{"name":"wait","slug":"wait","permalink":"http://jackwaylong.github.io/tags/wait/"},{"name":"sleep","slug":"sleep","permalink":"http://jackwaylong.github.io/tags/sleep/"}]},{"title":"shareUID","date":"2016-12-03T05:45:14.000Z","path":"2016/12/03/shareUID/","text":"shareUID是提供已经安装app之间的数据访问的通道，我们最常见的场景就是同一个公司不同的app安装在同一手机上，在某些时候可能需要数据，资源，代码共享，但是实现该目的也是有一定限制的，首先保证app之间的签名一致，同时shareUID值相等，才能完全无障碍访问所有资源，不然只能访问部分资源，代码，sharedPreferences等资源是没法访问到的，即使访问到的也是非安全的。 shareuid常见数据共享的方式有 用户数据共享 资源共享 代码共享 用户数据共享1234String filename = \"share\"; String key = \"share\"; String value = ShareUtils.getStringValue(this, targetPackagename, filename, key, \"\"); Log.e(TAG, \"value:\" + value); 资源共享12String app_name = ShareUtils.getResString(this, targetPackagename, \"app_name\"); Log.e(TAG, \"app_name:\" + app_name); 代码共享1234567891011121314151617181920String cName = \"com.longway.share.Print\"; Class&lt;?&gt; clz = ShareUtils.loadClass(this, targetPackagename, cName); if (clz != null) &#123; try &#123; Object o = clz.newInstance(); Method method = clz.getDeclaredMethod(\"print\", String.class); if (!method.isAccessible()) &#123; method.setAccessible(true); &#125; method.invoke(o, TAG); &#125; catch (InstantiationException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; catch (NoSuchMethodException e) &#123; e.printStackTrace(); &#125; catch (InvocationTargetException e) &#123; e.printStackTrace(); &#125; &#125; 以上只是简单的提供数据访问的几种方式面，比如数据库，assets等等都是可以访问的，但是访问的时候需要考虑数据安全。 访问数据简单代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public class ShareUtils &#123; private ShareUtils() &#123; &#125; public static String getStringValue(Context context, String targetPackname, String filename, String key, String dv) &#123; try &#123; Context ctx = context.createPackageContext(targetPackname, Context.CONTEXT_IGNORE_SECURITY); SharedPreferences sharedPreferences = ctx.getSharedPreferences(filename, Context.MODE_PRIVATE); return sharedPreferences.getString(key, dv); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); &#125; return dv; &#125; public static String getResString(Context context, String targetPackname, String resName, Object... args) &#123; try &#123; Context ctx = context.createPackageContext(targetPackname, Context.CONTEXT_IGNORE_SECURITY); Resources resources = ctx.getResources(); int id = resources.getIdentifier(resName, \"string\", targetPackname); if (id == 0) &#123; return null; &#125; return resources.getString(id, args); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); &#125; return null; &#125; public static String getAppname(Context context, String targetPackname,int id) &#123; try &#123; Context ctx = context.createPackageContext(targetPackname, Context.CONTEXT_IGNORE_SECURITY); Resources resources = ctx.getResources(); return resources.getString(id); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); &#125; return null; &#125; public static Class&lt;?&gt; loadClass(Context context, String targetPackagename, String name) &#123; try &#123; Context ctx = context.createPackageContext(targetPackagename,Context.CONTEXT_IGNORE_SECURITY|Context.CONTEXT_INCLUDE_CODE); ClassLoader classLoader = ctx.getClassLoader(); Log.e(\"loader\", (context.getClassLoader() == classLoader) + \"\"); Log.e(\"pathClassLoader\", (classLoader instanceof PathClassLoader) + \"\"); return classLoader.loadClass(name); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; return null; &#125;&#125; 注意 shareuid的前提是app已经安装到了设备中，不然是访问不了的，如果是没安装的访问，就只能用插件化的方式去加载，然后去访问了。根据自己的需求，选择对应的技术实现就好了。 查看源码实例","tags":[{"name":"shareUID","slug":"shareUID","permalink":"http://jackwaylong.github.io/tags/shareUID/"},{"name":"Context","slug":"Context","permalink":"http://jackwaylong.github.io/tags/Context/"}]},{"title":"SharedPreferences真的安全吗?","date":"2016-12-02T19:04:51.000Z","path":"2016/12/03/safesharepreferences/","text":"SharedPreferences是单进程线程安全,Android系统进程之间的内存是隔离的,这样就导致了进程之间如果访问同一个数据文件,进行数据共享通信的时候,可能会出现下面几种异常: 数据不一致 数据异常 文件异常 进程之间数据共享要想实现进程中之间安全通信,我们需要将不同进程之间对数据的访问映射到同一个数据进程,然后通过这个进程实现线程安全实现数据通信,我们可以将这个进程理解为代理进程,Android系统已经提供给我们ContentProvider进程,我们通过这个就可以实现安全通信 进程之间数据共享图例 Usage 注册进程之间数据观察者(非必须) 123456789private SharePreferencesObserver mSharePreferencesObserver = new SharePreferencesObserver() &#123; @Override public void onSharePreferencesChange(SharePreferencesObservable sharePreferencesObservable, String key) &#123; //Log.e(TAG, \"key:\" + key + \",value:\" + mSharePreferencesManager.getBoolean(key, false)); Log.e(TAG, \"map result &lt;&lt;\" + mSharePreferencesManager.getAll().toString()); &#125; &#125;;mSharePreferencesManager.registerOnSharePreferencesObserver(mSharePreferencesObserver); 数据访问 123456789101112131415161718Log.e(TAG, mSharePreferencesManager.putBoolean(\"isExpire\", true) + \"\");Log.e(TAG, mSharePreferencesManager.contains(\"isExpire\") + \"\");Log.e(TAG, mSharePreferencesManager.getBoolean(\"isExpire\", false) + \"\");Log.e(TAG, mSharePreferencesManager.putInt(\"int\", 3) + \"\");Log.e(TAG, mSharePreferencesManager.getInt(\"int\", -1) + \"\");Log.e(TAG, mSharePreferencesManager.putFloat(\"float\", 3.9f) + \"\");Log.e(TAG, mSharePreferencesManager.getFloat(\"float\", 0.0f) + \"\");Log.e(TAG, mSharePreferencesManager.putLong(\"long\", 40L) + \"\");Log.e(TAG, mSharePreferencesManager.getLong(\"long\", 0L) + \"\");Log.e(TAG, mSharePreferencesManager.putString(\"string\", \"小马哥\") + \"\");Log.e(TAG, mSharePreferencesManager.getString(\"string\", \"马云\"));Log.e(TAG, mSharePreferencesManager.remove(\"string\") + \"\");Set&lt;String&gt; set = new HashSet&lt;&gt;();set.add(\"hello1\");set.add(\"world1\");Log.e(TAG, mSharePreferencesManager.putStringSet(\"set\", set) + \"\");Log.e(TAG, mSharePreferencesManager.getStringSet(\"set\", null) + \"\");Log.e(TAG, \"map result &lt;&lt;\" + mSharePreferencesManager.getAll().toString()); 注意上面的步骤在任意进程都一样,并且数据都是安全共享的 问题使用过程中有任何问题反馈至feedback 支持 任何疑问? 源码学习safeSharedPreferences 贡献 clone项目发送pull request LicenseSafeSharedPreferences is under the Apache license. See the LICENSE file for details.","tags":[{"name":"sharepreferences","slug":"sharepreferences","permalink":"http://jackwaylong.github.io/tags/sharepreferences/"},{"name":"contentprovider","slug":"contentprovider","permalink":"http://jackwaylong.github.io/tags/contentprovider/"},{"name":"martixcursor","slug":"martixcursor","permalink":"http://jackwaylong.github.io/tags/martixcursor/"}]},{"title":"单例模式真的很简单吗？","date":"2016-12-02T18:30:04.000Z","path":"2016/12/03/single/","text":"单例模式真的不简单，但是单例模式也是我们开发中常用的一种设计模式,然而不管Github上开源的代码，还是很多开发同学写的单例模式，百花齐放，百家争鸣，各种版本，这篇文章我想跟大家聊聊我心中的单例模式，同时我会给出我心目中的单例模式的各种版本，同时会给出不同版本的优缺点，以及我们最后应该选用哪个版本才是最为安全，优雅，同时性能也是比较好的，最后我想说，安全，性能是一个折中的考虑。 单例对象创建的一般步骤 构造函数private 定义static成员变量 提供static getInstance 方法获取对象 SingletonV1123456789101112131415public class SingletonV1 &#123; private static SingletonV1 sInstance; private SingletonV1() &#123; &#125; public static SingletonV1 getInstance() &#123; if (sInstance == null) &#123; sInstance = new SingletonV1(); &#125; return sInstance; &#125;&#125; 这个版本是最简单的方式创建单例对象,但是这个版本只适合单线程场景下，在并发条件下，不能保证对象为唯一性，如果有同学也这么实现的，赶紧反思一下。 SingletonV21234567891011121314public class SingletonV2 &#123; private static SingletonV2 sInstance; private SingletonV2() &#123; &#125; public static synchronized SingletonV2 getInstance() &#123; if (sInstance == null) &#123; sInstance = new SingletonV2(); &#125; return sInstance; &#125;&#125; 这个版本跟第一个版本的区别就是多了个synchronized关键字，暂且我们这么理解，这个关键字是保证保证线程安全的，这样一来，我们保证了单例，确实没错，但是这个版本并不是我想要的，为什么了？因为这个锁是方法锁，意味着性能损失较大，至于为什么损失较大，这里就不展开讲了，有疑问的同学可以评论里，向我提问。 SingletonV312345678910111213141516public class SingletonV3 &#123; private static SingletonV3 sInstance; private SingletonV3() &#123; &#125; public static SingletonV3 getInstance() &#123; synchronized (SingletonV3.class) &#123; if (sInstance == null) &#123; sInstance = new SingletonV3(); &#125; &#125; return sInstance; &#125;&#125; 这个版本看上去是代码段局部锁，但是我们仔细一看，其实跟第二个版本一模一样，没有本质区别，所以这个版本也不是我们想要的。 SingletonV4123456789101112131415161718public class SingletonV4 &#123; private static SingletonV4 sInstance; private SingletonV4() &#123; &#125; public static SingletonV4 getInstance() &#123; if (sInstance == null) &#123; synchronized (SingletonV4.class) &#123; if (sInstance == null) &#123; sInstance = new SingletonV4(); &#125; &#125; &#125; return sInstance; &#125;&#125; 这个版本最大的改进是在第三个版本的基础上实现了双层检测，在某种层度上，性能有所提升，但是是不是就没有安全问题了，不是的，这个版本也不是我们想要的，因为在指令重排的情况下，会出错，在这里也不打算展开讲为什么会出现这中诡异的现象，有想知道原因的，可以在评论里，向我提问。 SingletonV512345678910111213141516public class SingletonV5 &#123; private static SingletonV5 sInstance; private SingletonV5() &#123; &#125; public static SingletonV5 getInstance() &#123; if (sInstance == null) &#123; synchronized (SingletonV5.class) &#123; sInstance = new SingletonV5(); &#125; &#125; return sInstance; &#125;&#125; 这个版本有在并发的环境下很难保证单例，也有可能报错。 SingletonV612345678910111213141516171819202122public class SingletonV6 &#123; private static volatile SingletonV6 sInstance; private SingletonV6() &#123; &#125; protected Object readResolve() &#123; return getInstance(); &#125; public static SingletonV6 getInstance() &#123; if (sInstance == null) &#123; synchronized (SingletonV6.class) &#123; if (sInstance == null) &#123; sInstance = new SingletonV6(); &#125; &#125; &#125; return sInstance; &#125;&#125; 这个版本算比较完美了，在某种条件下，保证了单例，同时性能也有了一定的保证，同时反序列化也保证了单例，但是这种是不是也就没问题了，错了，这个版本在jdk1.5之后才能算完美，以前版本还是有问题的, 这里不展开讲原因，有疑问的同学在下面的评论，可以向我提问。 SingletonV7123public enum SingletonV7 &#123; INSTANCE&#125; 这个版本是上一个版本的增强版，同时也是最优雅的版本，也是最为安全的版本，性能也是较好的版本，同时基于自身特点保证了序列化，反序列化的安全，同时也是目前最为推荐使用的单例版本，这里不展开讲原因，有兴趣的同学，可以在下面的评论，向我提问。 SingletonV812345678910111213public class SingletonV8 &#123; private SingletonV8() &#123; &#125; private static class SingletonHolder &#123; private static final SingletonV8 INSTANCE = new SingletonV8(); &#125; public static SingletonV8 getInstance() &#123; return SingletonHolder.INSTANCE; &#125;&#125; 这个版本也是虚拟机能够保证安全的版本，但是需要额外的内部类提供保证，空间复杂度比上面版本大，综合考虑还是考虑枚举版本 SingletonV91234567891011public class SingletonV9 &#123; private static final SingletonV9 INSTANCE = new SingletonV9(); private SingletonV9() &#123; &#125; public static SingletonV9 getInstance() &#123; return INSTANCE; &#125;&#125; 这个版本也是安全的，但是有个缺陷就是这个类只要其中有个静态成员加载，那么就会创建对象，也是我们经常说的饿汉式模式，上面的版本都是懒汉式模式，对于这两种模式不太了解的，可以在下面的评论，向我提问。 SingletonV1012345678910111213141516171819202122public class SingletonV10 &#123; private static volatile SingletonV10 sInstance; private static final AtomicBoolean FLAG = new AtomicBoolean(false); private SingletonV10() &#123; &#125; public static SingletonV10 getInstance() &#123; for (; ; ) &#123; if (FLAG.compareAndSet(false, true)) &#123; sInstance = new SingletonV10(); break; &#125; if (sInstance != null) &#123; break; &#125; &#125; return sInstance; &#125;&#125; 这个版本是用CAS的无阻塞，乐观锁的特性实现 扩展 对象创建的不同方式，以及不同点 对象的创建过程 classloader的namespace 虚拟机实例的个数对对象的影响 继承对对象创建的影响 对象代码复用 对象锁，类锁，全局锁的区别 锁中的坑 这篇由于主要由浅入深的讲解单例，上面的扩展就不展开讲了，如果有感兴趣的同学，可以在评论里，向我提问，我会详细解答的，后面的文章我也会由浅入深的讲解。 总结看似很简单一种设计模式，其实我们深入思考一下，就没那么简单了，中间有很多技术点，有很多细节需要我们去挖掘，思考，最后推荐SingletonV7版本，注意这个只是保证了对象创建安全，对象成员的安全，还需要我们自己去保证。希望阅读过这篇文章的同学，再也不要写不安全的单例对象代码了，代码改进的一小步，程序稳定，可靠的一大步。 可能的疑问有的同学可能会在想，客户端平台不是不建议enum吗？确实没错，那是很早以前android官网也不建议使用，但是现在你去看官网还能看到那句话吗？google已经去掉了，至于为什么去掉了，我个人认为，有几种可能的原因，第一个是目前机器的配置，现在的cpu，内存等配置跟以前都不是在一个级别上，第二个就是软件层运行时对代码优化。另外还有JakeWharton大神都不考虑这个了，我们还有什么理由考虑这些了，其实真的没必要考虑这个了。","tags":[{"name":"single","slug":"single","permalink":"http://jackwaylong.github.io/tags/single/"},{"name":"volatile","slug":"volatile","permalink":"http://jackwaylong.github.io/tags/volatile/"},{"name":"synchronized","slug":"synchronized","permalink":"http://jackwaylong.github.io/tags/synchronized/"},{"name":"enum","slug":"enum","permalink":"http://jackwaylong.github.io/tags/enum/"}]},{"title":"揭开Gradle的神秘面纱","date":"2016-11-28T16:32:01.000Z","path":"2016/11/29/gradle/","text":"gradle前言 在解开gradle神秘面纱前,我想说一下gradle是如此的强大,在我看来在目前互联网爆炸的时代,构建工具也不少,比如以前我接触的Ant,maven等,在这里只想说我接触gradle并且去研究之后,从此我就爱上了gradle的强大，灵活，高效，并且可以让我们android开发者上手快，这是因为我们android开发的主要语言是java，java是基于虚拟的一种语言，而gradle的最终产物也是java子节码，所以我认为我们写gadle代码就是写业务代码，当然也有不同，那就是dsl特性，后面会慢慢展开讲解，让大家真正的去理解gradle的强大，并且能够真正的在as的强大能力下，能够将gardle真正运用好，提高开发效率。这里我并不是吐槽其他构件工具不好,没有最好，只有更好，更适合，从客户端构件角度来看，我个人觉得gradle非常适合，下面将解开gradle一层一层的面纱。gradle大纲 gradle是什么 gradle的好处 gradle内部构建原理 如何使用gradle提高工作效率 gradle工程构建流 gradle实战 gradle是什么 gradle其实是一套构件工具机,使用groovy语言的DSL特性以及java的灵活特性进行构建,还有很多特性大家可以去gradle.org官网进行深入的学习或者google找相关资料了解 gradle的好处 其实我们学习一门技术肯定是有对应的好处我们才去学习对吧,不管好处多大,起码能帮助我们工作,毕竟我们都是上班的码农,我个人认为gradle最大的好处就是能够让我们更关注我们最关注的，不需要关注那些与我们关系不大的，毕竟我们不需要关注，然而这样就让我们失去了很多的深入学习的机会，导致我们养成了只要能用就行的思维，在我看来懒惰使人进步，为了想懒惰我一定要去思考如何自动化的去解决问题，gradle满足了我的目标，非常强大。 gradle的内部构建原理 在讲解内部构件原理之前，我想讲解下我是如何去理解gradle这玩意的，gradle按照一般写业务代码的思维还是有点区别的，毕竟领域不同，gradle写的是脚本，却运行的java子节码，所以我这么思考，我用写java运行时的思维去写gradle脚本，然后学习gradle dsl特性，这样以来，理解这个构建工具就非常流畅了，不然我是理解不好的，每个人都有自己的理解方式，找自己最好的理解方式就好。gradle构建内部运行机制是这样的，首先初始化构建引擎，然后将脚本转换成java代码,然后就是我们最熟悉的构建过程了,将java代码转换成子节码,然后交给虚拟机加载执行 如何使用gradle提高工作效率 我个人认为构建工具毕竟是一种工具特性,那么就一套完善的高效特性让我去挖掘,我目前挖掘的有利用as的工程特性，结合gradle的强大构建特性，自动化分析文件，自动化打包，模版构建，后面不断有新的挖掘，我相信只要是工具类的东西然后结合我们的技术手段那么肯定会提高我们的工作效率，可能需要手动10分钟的事情，而用gradle处理只要1分钟，甚至更短，错误几率也大大减低，减除人工干预，毕竟现在是人工智能时代，感觉我们会被计算机征服，真可怕，我们唯一能做的就是提升自己。 gradle工程构建流 as gradle工程构建流图示 gradle实战 构建脚本集 settings.gradle root build.gradle init.gradle utils.gradle tasks.gradle submodle build.gradle common.properties template/project.properties publish.bat/publish.sh properties gradle插件开发 插件开发基本流程 插件工程一般结构 插件开发语言(java,gradle,groovy等等) 插件打包 插件部署 插件访问 总结 到此gradle基本构建流已经说完了,这些只是构建的开始,后面我还会继续深入gradle在组件化开发中的作用以及强大支撑，只有明白了gradle的基本工作原理，我们才能更好的去灵活运用gradle来拆分我们的工程，很好的解耦我们的工程，目前比较的多的开发模式有组件化，插件化，我个人理解gradle就是开发模式的驱动者，学好gradle才是根本，才能很好的进行模式开发，gradle网上的指导资料很少，基本都是一些用法，没有分析原理的，对于技术者我强烈建议学习一门技术还是去对应的官网，这样不仅仅能系统的学习，并且还能更为深入的理解语言的本质。 建议 工程构建一般是跨界的，也就是说可能会涉及到很多种技术的融合，我目前接触到的有python，groovy，bash，bat 等脚本语言，希望大家不要仅仅停留在android业务开发中，技术融合才能让自己强大，多学习不同技术提高自己的维度，深度，广度。 后续gradle学习计划 继续深入gradle构建流 gradle源码分析 发现gradle中好玩的东西，灵活运用到实际项目中 基于gradle构建项目到产品输出闭环 gradle项目地址 下载 github查看","tags":[{"name":"gradle","slug":"gradle","permalink":"http://jackwaylong.github.io/tags/gradle/"}]},{"title":"modularity","date":"2016-11-27T08:50:54.000Z","path":"2016/11/27/modularity/","text":"主题大纲 什么是组件化 什么是插件化 为什么要组件化 如何组件化 组件化的基本模型 组件化开发中的问题 组件化测试 组件化组件编译 组件化打包 组件化开发闭环链接系统 Q&amp;A 什么是组件化在了解组件化之前,我们首先回顾一下目前非组件化工程的基本结构,首先我想说大家最想说的是as编译太慢,编译让人蓝瘦香菇，并且谁者业务需求越来越多，代码越来越多，编译时间线性增加，有些同学可能会通过自己机器的配置对应的设置，as的编译配置文件，增量编译，但是这样的结果还不是很明显，一方面由于as对增量编译的支持力度，在这个过程中有代码缓存问题。我们通过clean去解决，这样会导致重新build，从而导致编译时间还是很长，编译就像as给予我们放松的时刻。面对上面的这些问题，我相信我们很多同学都思考过，拆分当个工程为多个工程，然后模块编译，模块测试，最后整合若干模块称为一个apk，没错，思路是对的，但是为什么这些理论很难得到实践了。这就是我们经常说的，理想很丰满，现实很骨感。当我们找到一个理论突破口的时候，就感觉很满足，就觉得就这样。我想说我们必须实践，熟话说，实践才是检验真理的唯一标准，我们需要思考，学习，实践，用理论去解决实际问题。我个人认为as与生俱来就是提供开发者模块化的ide，很多同学可能有疑问，为什么这么认为，我们开发时仅仅把as看作一个开发辅助工具，但是我们站在更高的角度去思考，其实as给我们不仅仅是一种工具，而是一种给予我们基于这个工具去能创造，创新开发模式的软件。明白了这些，那么组件化到底是什么了，我看目前网上关于组件化开发的文章，这说明也有很多在开发中实践的，我个人认为还是不够完善，或者说很多问题，很多坑。我对组件化的理解就是module化开发，module测试，module打包，module发包，module集成，module暴露，下面详细说这些具体怎么做。 什么是插件化有的同学很能有很大的疑问，主题是组件化，为什么要了解什么是插件化，这里只是说明一下插件化与组件化的区别，让我们实践过程中能够分清开发界限，能够将组件化做的更好。插件化是很多的开发模式，我们明白一点就可以了，插件化是单独的apk，jar，zip，dex，资源，so等。将这些进行动态加载，然而组件化本质还是一个主apk。不管多少module，最后都会整合成一个apk。所以我们就有了更新的开发模式，组件化中插件化，这里不详细展开说，今天主题是组件化，我们专一讲好一个主题，后面再安排讲解这种模式。 为什么要组件化一开始我们讲解了，什么组件化，以及组件化的好处，以及组件化的大致几个流程，有的同学可能还有很多的疑问，我们一个app运行起来，如果机器配置好点，速度也挺快的，写代码写起来也很舒服，组件化也没必要，可能还认为组件化开发流程复杂，带给我们的价值不大。我想说作为开发者千万不要这么想，我们要想的是这种模式能不能适合我们的场景，任何一种技术都是有场景范围的，不是universal的。我个人认为组件化最大的好处就是解耦合，最大程度的并行开发，非常适合自动化测试，非常适合代码管理，这些同学们不能很好的体会，后面我都会通过事例来讲解，先心中有个印象。 如何组件化 组件化开发要简单也可以很简单，要复杂也可以很复杂，但是我们开发就是要偷懒，要写脚本自动化执行我们重复的工作。所以我们如何将复杂的事情转化成简单的脚本，让as帮我们去加载执行。既然组件化是基于as的，那么首先我们需要学习gradle脚本的编写，groovy语言的学习，不同平台的脚本语言学习，比如mac下面的bash语言学习，还有一门辅助脚本的学习python，这些都可以让我们的组件化开发高效，从而提高开发效率，降低开发成本。没有做过组件化架构搭建的同学可能一下子就懵了，这些我都不要会，就会写基础代码，大多数都一样，不会我们学习就好，够用就好，然后不断去深入学习。有了这些基础的东西，下面进展就会比较顺利，不然后面可能很多问题。接下来我们就是需要拆分模块，同时引入基础库，初始化基本配置，配置依赖，这些后面我会通过演示的方式进行讲解。 组件化的基本模型基于我对组件化开发的实践，与团队对组件化的理解，我总结出了一套开发模型基本图 组件化开发中的问题其实组件化开发中很多问题需要我们解决，我遇到的有，依赖关系的处理，资源重复(通过添加资源前缀)，清单文件的冲突(tools)，打包运行崩溃，直接依赖aar,jar等 组件化测试由于业务需求多，我想同学们基本都是很少测试的，即使测试也是run一下，没有写单元测试，这很大原因是写测试代码需要发费很多时间，需要编译整个工程，编译时间太长。组件化之后，我们就很容易测试自己负责的module了，并不需要加载其他人写的module，目前我们可以用自测方式测试，不用自动化测试框架之内的，看个人对测试的兴趣，这部分我也会通过演示的方式，进行讲解,同时可能涉及到application访问的问题，即使在app容器里面也有类似的问题。 组件化组件编译组件化编译每个module都是一个aar，所以我们依赖直接aar就好，但是这里需要注意一个问题，就是必须依赖带有依赖文件的aar，比如pom文件，不管本地的还是服务端的，不然运行时可能出现Class找不到的情况。还有一些是生成jar包，直接依赖就好，如果组件化中有插件加载机制，需要注意插件工程依赖共同jar时重复打包问题，provider模式解决这种问题。 组件化打包组件化打包其实就是将aar进行整合，然后生成一个apk文件。这个apk可以单独加载，也可以单独运行。 组件化开发闭环链接系统组件化闭环系统基本组成:git源代码管理,maven二进制包管理,jenkins打包管理,gerrit代码审查等其他辅助系统，比如mail系统，短信系统。 Q&amp;A同学们的疑问与解答","tags":[{"name":"modularity","slug":"modularity","permalink":"http://jackwaylong.github.io/tags/modularity/"}]}]